[{"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/leave_collection.js", "function_name": "promise_to_group_leaves", "function_code": "function promise_to_group_leaves(leaves) {\n\n  if ( ! leaves ) {\n    throw new Error('Did not get \"leaves\" in promise_to_group_leaves');\n  }\n\n  let grouped_leaves = {};\n\n  // Group leaves by years\n  leaves.forEach(leave => {\n    let year = moment.utc(leave.get_start_leave_day().date).format('YYYY');\n\n    if ( ! grouped_leaves[year]) {\n      grouped_leaves[ year ] = {\n        year : year,\n        leaves : [],\n      };\n    }\n\n    grouped_leaves[ year ].leaves.push(leave);\n  });\n\n  // Sort year groups\n  grouped_leaves = _\n    .values( grouped_leaves )\n    .sort((a,b) => a.year > b.year ? -1 : a.year < b.year ? 1 : 0);\n\n  // Calculate total allowance deduction per group\n  grouped_leaves.forEach(group => {\n    group.total_deduction = _.reduce(\n      group.leaves.map(leave => leave.get_deducted_days_number()),\n      (memo, number) => memo + number,\n      0\n    );\n  });\n\n  return Promise.resolve(grouped_leaves);\n}", "function_parameters": [{"type": "simple", "name": "leaves", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "promise_to_group_leaves", "startLine": 10, "endLine": 47, "startIndex": 154, "endIndex": 1073, "reach": "globalNoExport", "reachName": "promise_to_group_leaves", "reachDetail": "rewire().__get__(promise_to_group_leaves)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/leave_collection.js", "function_name": "promise_to_sort_leaves", "function_code": "function promise_to_sort_leaves(leaves) {\n  return Promise.resolve( leaves.sort(\n    (a,b) => a.date_start > b.date_start\n      ? -1 : a.date_start < b.date_start\n      ? 1 : 0\n  ));\n}", "function_parameters": [{"type": "simple", "name": "leaves", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "promise_to_sort_leaves", "startLine": 54, "endLine": 60, "startIndex": 1157, "endIndex": 1341, "reach": "globalNoExport", "reachName": "promise_to_sort_leaves", "reachDetail": "rewire().__get__(promise_to_sort_leaves)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/audit.js", "function_name": "getAuditCaptureForUser", "function_code": "({byUser, forUser, newAttributes}) => () => {\n  const attributeUpdates = Object.keys(newAttributes)\n    .filter(k => String(newAttributes[k]) !== String(forUser[k]))\n    .map(\n      attribute => Models.Audit.create({\n        companyId:  byUser.companyId,\n        byUserId:   byUser.id,\n        entityType: 'USER',\n        entityId:   forUser.id,\n        attribute,\n        oldValue:   String(forUser[attribute]),\n        newValue:   String(newAttributes[attribute]),\n      })\n    );\n\n  return Bluebird.map(attributeUpdates, f => f, {concurrency : 5});\n}", "function_parameters": [{"type": "object_pattern", "keys": ["byUser", "forUser", "newAttributes"], "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "getAuditCaptureForUser", "startLine": 8, "endLine": 24, "startIndex": 116, "endIndex": 669, "reach": "member", "reachNames": ["getAuditCaptureForUser"], "reachDetail": "require().getAuditCaptureForUser", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": false, "paramCount": 1, "reason": "UnsupportedParameterNotSimple"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/audit.js", "function_name": "getAudit", "function_code": "({companyId}) => {\n  return Models.Audit.findAll({\n    where : {\n      companyId,\n    },\n    raw: true,\n  })\n}", "function_parameters": [{"type": "object_pattern", "keys": ["companyId"], "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "getAudit", "startLine": 26, "endLine": 33, "startIndex": 689, "endIndex": 799, "reach": "member", "reachNames": ["getAudit"], "reachDetail": "require().getAudit", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": false, "paramCount": 1, "reason": "UnsupportedParameterNotSimple"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20171220-drop-adjustment-column-from-user.js", "function_name": "up", "function_code": "function (queryInterface, Sequelize) {\n\n    return queryInterface\n      .describeTable('Users')\n      .then(attributes => {\n\n        if ( ! attributes.hasOwnProperty('adjustment')) {\n          return Promise.resolve();\n        }\n\n        if ('sqlite' !== queryInterface.sequelize.getDialect()) {\n          // For non SQLite: it is easy\n          return queryInterface.removeColumn(\n            models.User.tableName,\n            'adjustment'\n          );\n        }\n\n        // For SQLite it is \"fun\"\n\n        return queryInterface\n          // Create Temp Users based on current model definitiom\n          .createTable('Users_backup', models.User.attributes)\n\n          .then(function(){\n            return queryInterface.sequelize.query('PRAGMA foreign_keys=off;');\n          })\n\n          // Copy data form original Users into new Temp one\n          .then(function(){\n            return queryInterface.sequelize.query(\n              'INSERT INTO `Users_backup` (`id`, `email`, `password`, `name`, `lastname`, `activated`, `admin`, `start_date`, `end_date`, `createdAt`, `updatedAt`, `companyId`, `DepartmentId`, `auto_approve`) SELECT `id`, `email`, `password`, `name`, `lastname`, `activated`, `admin`, `start_date`, `end_date`, `createdAt`, `updatedAt`, `companyId`, `DepartmentId`, `auto_approve` FROM `'+ models.User.tableName +'`');\n          })\n\n          .then(() => queryInterface.dropTable( models.User.tableName ))\n          .then(() => queryInterface.renameTable('Users_backup', models.User.tableName))\n          .then(() => queryInterface.sequelize.query('PRAGMA foreign_keys=on;'))\n          .then(() => queryInterface.addIndex(models.User.tableName, ['companyId']))\n\n      });\n  }", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "up", "startLine": 8, "endLine": 48, "startIndex": 116, "endIndex": 1812, "reach": "member", "reachNames": ["up"], "reachDetail": "require().up", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20171220-drop-adjustment-column-from-user.js", "function_name": "down", "function_code": "function (queryInterface, Sequelize) {\n    // No way back!\n    return Promise.resolve();\n  }", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "down", "startLine": 50, "endLine": 53, "startIndex": 1823, "endIndex": 1915, "reach": "member", "reachNames": ["down"], "reachDetail": "require().down", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/t/lib/check_elements.js", "function_name": "__direct_export__", "function_code": "function(args){\n  return args.driver.call(function(){return check_elements_func(args)});\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "__direct_export__", "startLine": 50, "endLine": 52, "startIndex": 1356, "endIndex": 1446, "reach": "direct", "reachDetail": "require()", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/t/lib/logout_user.js", "function_name": "__direct_export__", "function_code": "function(args){\n  return args.driver.call(function(){return logout_user_func(args)});\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "__direct_export__", "startLine": 61, "endLine": 63, "startIndex": 1485, "endIndex": 1572, "reach": "direct", "reachDetail": "require()", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/mixin/user/company_aware.js", "function_name": "__direct_export__", "function_code": "function(sequelize){\n\n  /* Fetch company object associated with current user, the company object\n   * includes all necessary associations for building user detail page\n   * for user determined by user_id.\n   * Returns promise that is resolved with company object as parameter\n   */\n  //\n  // TODO: Query below needs to be revisited as it is slow for users\n  // with many leaves\n  //\n  this.get_company_for_user_details = function(args){\n    var user_id    = args.user_id,\n      year         = args.year || moment.utc(),\n      current_user = this;\n\n    return this.getCompany({\n      include : [\n        {\n          model : sequelize.models.User,\n          as    : 'users',\n          where : { id : user_id },\n          include : [\n\n            // Following is needed to be able to calculate how many days were\n            // taken from allowance\n            {\n              model   : sequelize.models.Leave,\n              as      : 'my_leaves',\n              required : false,\n              where : {\n                $or : {\n                  date_start : {\n                    $between : [\n                      moment.utc().startOf('year').format('YYYY-MM-DD'),\n                      moment.utc().endOf('year').format('YYYY-MM-DD HH:mm'),\n                    ]\n                  },\n                  date_end : {\n                    $between : [\n                      moment.utc().startOf('year').format('YYYY-MM-DD'),\n                      moment.utc().endOf('year').format('YYYY-MM-DD HH:mm'),\n                    ]\n                  }\n                }\n              },\n              include : [{\n                    model : sequelize.models.LeaveType,\n                    as    : 'leave_type',\n                },{\n                    model   : sequelize.models.User,\n                    as      : 'user',\n                    include : [{\n                      model   : sequelize.models.Company,\n                      as      : 'company',\n                      include : [{\n                        model : sequelize.models.BankHoliday,\n                        as    : 'bank_holidays',\n                      }],\n                    }],\n              }] // End of my_leaves include\n            },{\n              model : sequelize.models.Department,\n              as    : 'department',\n            }\n          ],\n        },{\n          model : sequelize.models.Department,\n          as : 'departments',\n          include : {\n            model : sequelize.models.User,\n            as : 'boss',\n          }\n        }\n      ],\n      order : [\n        [\n          {model : sequelize.models.Department, as : 'departments'},\n          sequelize.models.Department.default_order_field(),\n        ]\n      ],\n    })\n\n    // Make sure that company got only one user associated with for\n    // provided user_id\n    .then(function(company){\n\n      if (!company || company.users.length !== 1) {\n          throw new Error(\n              'User '+current_user.id+' tried to edit user '+user_id\n                  +' but they do not share a company'\n          );\n      }\n\n      return Promise.resolve(company);\n    });\n  };\n\n\n  this.get_company_for_add_user = function() {\n    var model = sequelize.models;\n\n    return this.getCompany({\n      include : [\n        {model : model.Department, as : 'departments'}\n      ],\n      order : [\n        [\n          {model : model.Department, as : 'departments'},\n          model.Department.default_order_field(),\n        ]\n      ],\n    });\n  };\n\n\n  this.get_company_with_all_leave_types = function() {\n    return this.getCompany({\n      include : [{\n        model : sequelize.models.LeaveType,\n        as    : 'leave_types',\n      }],\n      order : [\n        [{ model : sequelize.models.LeaveType, as : 'leave_types' }, 'sort_order', 'DESC'],\n        [{ model : sequelize.models.LeaveType, as : 'leave_types' }, 'name']\n      ]\n    });\n  };\n\n}", "function_parameters": [{"type": "simple", "name": "sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "__direct_export__", "startLine": 17, "endLine": 146, "startIndex": 390, "endIndex": 4256, "reach": "direct", "reachDetail": "require()", "hasReturn": false, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20170329060832-rename_allowence_to_allowance.js", "function_name": "up", "function_code": "function (queryInterface, Sequelize) {\n\n    queryInterface.describeTable('Departments').then(function(attributes){\n\n      if (attributes.hasOwnProperty('allowance')) {\n        return 1;\n      }\n\n      if ('sqlite' === queryInterface.sequelize.getDialect()) {\n\n        console.log('Going into SQLIite case');\n\n        return queryInterface\n          // Create Temp Departments based on current model definitiom\n          .createTable('Departments_backup', models.Department.attributes)\n\n          .then(function(){\n            return queryInterface.sequelize.query('PRAGMA foreign_keys=off;');\n          })\n\n          // Copy data form original Departments into new Temp one\n          .then(function(){\n            return queryInterface.sequelize.query(\n              'INSERT INTO `Departments_backup` (id, name, include_public_holidays, createdAt, updatedAt, companyId, bossId, allowance) SELECT id, name, include_public_holidays, createdAt, updatedAt, companyId, bossId, allowence FROM `'+ models.Department.tableName +'`');\n          })\n\n          .then(function(){\n            return queryInterface.dropTable( models.Department.tableName );\n          })\n\n          .then(function(){\n            return queryInterface.renameTable('Departments_backup', models.Department.tableName);\n          })\n\n          .then(function(){\n            return queryInterface.sequelize.query('PRAGMA foreign_keys=on;');\n          })\n\n          .then(function(){\n            queryInterface.addIndex(models.Department.tableName, ['companyId']);\n          })\n\n          .then(function(){\n            queryInterface.addIndex(models.Department.tableName, ['id']);\n          });\n\n      } else {\n\n        console.log('Generic option');\n\n        return queryInterface.renameColumn('Departments', 'allowence', 'allowance')\n          .then(function(d){ console.dir(d) });\n      }\n    });\n  }", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "up", "startLine": 6, "endLine": 60, "startIndex": 82, "endIndex": 1947, "reach": "member", "reachNames": ["up"], "reachDetail": "require().up", "hasReturn": false, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20170329060832-rename_allowence_to_allowance.js", "function_name": "down", "function_code": "function (queryInterface, Sequelize) {\n    return queryInterface.renameColumn('Departments', 'allowance', 'allowence');\n  }", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "down", "startLine": 62, "endLine": 64, "startIndex": 1958, "endIndex": 2081, "reach": "member", "reachNames": ["down"], "reachDetail": "require().down", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/route/users/index.js", "function_name": "ensure_user_was_not_useed_elsewhere_while_being_inactive", "function_code": "function(args){\n  var\n    employee            = args.employee,\n    new_user_attributes = args.new_user_attributes,\n    req                 = args.req,\n    model               = args.model;\n\n  if (\n    // Employee has end_date defined\n    employee.end_date &&\n    (\n     ! new_user_attributes.end_date\n     ||\n      (\n        // new \"end_date\" is provided\n        // new \"end_date\" is in future\n        new_user_attributes.end_date &&\n        moment.utc( new_user_attributes.end_date ).startOf('day').toDate() >= req.user.company.get_today().startOf('day').toDate()\n      )\n    )\n  ) {\n    return model.User.find_by_email(new_user_attributes.email)\n      .then(function(user){\n\n        if (user && user.companyId !== employee.companyId) {\n          var error_msg = 'There is an active account with similar email somewhere within system.';\n          req.session.flash_error(error_msg);\n          throw new Error(error_msg);\n        }\n\n        return Promise.resolve();\n      });\n  }\n\n  return Promise.resolve();\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "ensure_user_was_not_useed_elsewhere_while_being_inactive", "startLine": 444, "endLine": 479, "startIndex": 13411, "endIndex": 14422, "reach": "globalNoExport", "reachName": "ensure_user_was_not_useed_elsewhere_while_being_inactive", "reachDetail": "rewire().__get__(ensure_user_was_not_useed_elsewhere_while_being_inactive)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/route/users/index.js", "function_name": "ensure_email_is_not_used_elsewhere", "function_code": "function(args){\n  var\n    employee            = args.employee,\n    new_user_attributes = args.new_user_attributes,\n    req                 = args.req,\n    model               = args.model;\n\n  if (new_user_attributes.email === employee.email) {\n    return Promise.resolve();\n  }\n\n  return model.User\n    .find_by_email(new_user_attributes.email)\n    .then(function(user){\n\n      if (user) {\n        req.session.flash_error('Email is already in use');\n        throw new Error('Email is already used');\n      }\n\n      return Promise.resolve();\n    });\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "ensure_email_is_not_used_elsewhere", "startLine": 484, "endLine": 506, "startIndex": 14569, "endIndex": 15119, "reach": "globalNoExport", "reachName": "ensure_email_is_not_used_elsewhere", "reachDetail": "rewire().__get__(ensure_email_is_not_used_elsewhere)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/route/users/index.js", "function_name": "ensure_we_are_not_removing_last_admin", "function_code": "function(args){\n  var\n    employee            = args.employee,\n    new_user_attributes = args.new_user_attributes,\n    req                 = args.req,\n    model               = args.model;\n\n  if (\n    // It is about to change admin rights\n    new_user_attributes.admin !== employee.admin\n    // and it is revoking admin rights\n    && ! new_user_attributes.admin\n  ) {\n    return model.User\n      .count({ where : {\n        companyId : employee.companyId,\n        id        : { $ne : employee.id},\n        admin     : true,\n      }})\n      .then(function(number_of_admins_to_be_left){\n        if (number_of_admins_to_be_left > 0) {\n          return Promise.resolve();\n        }\n\n        req.session.flash_error('This is last admin within company. Cannot revoke admin rights.');\n        throw new Error('Attempt to revoke admin rights from last admin in comapny '+employee.companyId);\n      });\n  }\n\n  return Promise.resolve();\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "ensure_we_are_not_removing_last_admin", "startLine": 508, "endLine": 538, "startIndex": 15166, "endIndex": 16093, "reach": "globalNoExport", "reachName": "ensure_we_are_not_removing_last_admin", "reachDetail": "rewire().__get__(ensure_we_are_not_removing_last_admin)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/route/users/index.js", "function_name": "promise_user_list_data_for_rendering", "function_code": "function promise_user_list_data_for_rendering(args) {\n  let\n    company = args[0],\n    users_info = args[1];\n\n  let users_info_for_rendering = users_info.map(ui => ({\n    user_id                               : ui.user_row.id,\n    user_email                            : ui.user_row.email,\n    user_name                             : ui.user_row.name,\n    user_lastname                         : ui.user_row.lastname,\n    user_full_name                        : ui.user_row.full_name(),\n    department_id                         : ui.user_row.department.id,\n    department_name                       : ui.user_row.department.name,\n    is_admin                              : ui.user_row.admin,\n    number_of_days_available_in_allowance : ui.number_of_days_available_in_allowance,\n    number_of_days_taken_from_allowance   : ui.user_row.calculate_number_of_days_taken_from_allowance(),\n    is_active                             : ui.user_row.is_active(),\n  }));\n\n  return Promise.resolve([company, users_info_for_rendering]);\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "promise_user_list_data_for_rendering", "startLine": 892, "endLine": 912, "startIndex": 26476, "endIndex": 27502, "reach": "globalNoExport", "reachName": "promise_user_list_data_for_rendering", "reachDetail": "rewire().__get__(promise_user_list_data_for_rendering)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/route/users/index.js", "function_name": "users_list_as_csv", "function_code": "function users_list_as_csv(args) {\n  let users_info = args.users_info,\n      company = args.company,\n      res = args.res;\n\n  // Compose file name\n  res.attachment(\n    company.name_for_machine()\n      + '_employees_on_'\n      + company.get_today().format('YYYY_MMM_DD')\n      + '.csv'\n  );\n\n  // Compose result CSV header\n  let content = [['email', 'lastname', 'name', 'department', 'remaining allowance', 'days used']];\n\n  // ... and body\n  users_info.forEach(ui => {\n    content.push([\n      ui.user_email,\n      ui.user_lastname,\n      ui.user_name,\n      ui.department_name,\n      ui.number_of_days_available_in_allowance,\n      ui.number_of_days_taken_from_allowance\n    ]);\n  });\n\n  return csv.stringifyAsync( content )\n    .then(csv_data_string => res.send(csv_data_string));\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "users_list_as_csv", "startLine": 914, "endLine": 944, "startIndex": 27504, "endIndex": 28289, "reach": "globalNoExport", "reachName": "users_list_as_csv", "reachDetail": "rewire().__get__(users_list_as_csv)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/route/users/index.js", "function_name": "get_and_validate_user_parameters", "function_code": "function get_and_validate_user_parameters(args) {\n    var req         = args.req,\n        item_name   = args.item_name,\n        require_password = args.require_password || false;\n\n    // Get user parameters\n    var name     = validator.trim(req.body['name']),\n        lastname = validator.trim(req.body['lastname']),\n        email    = validator.trim(req.body['email_address']),\n        department_id     = validator.trim(req.body['department']),\n        start_date        = validator.trim(req.body['start_date']),\n        end_date          = validator.trim(req.body['end_date']),\n        adjustment        = validator.trim(req.body['adjustment']),\n        password          = validator.trim(req.body['password_one']),\n        password_confirm  = validator.trim(req.body['password_confirm']),\n        admin             = validator.toBoolean(req.body['admin']),\n        auto_approve      = validator.toBoolean(req.body['auto_approve']);\n\n    // Validate provided parameters\n\n    if (!validator.isEmail(email)) {\n        req.session.flash_error(\n            'New email of '+item_name+' should be valid email address'\n        );\n    }\n\n    if (!validator.isNumeric(department_id)) {\n        req.session.flash_error(\n            'New department number of '+item_name+' should be a valid number'\n        );\n    }\n\n    if (adjustment && ! validator.isFloat(adjustment) ) {\n      req.session.flash_error(\n        'New allowance adjustment of '+item_name+' should be a valid number'\n      );\n    } else if (adjustment && ! ( adjustment % 1 === 0 || Math.abs( adjustment % 1 ) === 0.5 )) {\n      req.session.flash_error(\n        'New allowance adjustment of '+item_name+' should be either whole integer number or with half'\n      );\n    }\n\n    start_date = req.user.company.normalise_date( start_date );\n\n    if (!validator.isDate(start_date)) {\n      req.session.flash_error(\n        'New start date for '+item_name+' should be valid date'\n      );\n    }\n\n    if (end_date ){\n\n      end_date = req.user.company.normalise_date( end_date );\n\n      if ( ! validator.isDate(end_date)) {\n        req.session.flash_error(\n          'New end date for '+item_name+' should be valid date'\n        );\n      }\n    }\n\n    if (\n        start_date &&\n        end_date &&\n        moment.utc(start_date).toDate() > moment.utc(end_date).toDate()\n    ){\n        req.session.flash_error(\n            'End date for '+item_name+' is before start date'\n        );\n    }\n\n    if (password && password !== password_confirm) {\n      req.session.flash_error('Confirmed password does not match initial one');\n    }\n\n    if (require_password && ! password) {\n      req.session.flash_error('Password is required');\n    }\n\n    if ( req.session.flash_has_errors() ) {\n        throw new Error( 'Got validation errors' );\n    }\n\n    // Normalize email as we operate only with lower case letters in emails\n    email = email.toLowerCase();\n\n    var attributes = {\n        name         : name,\n        lastname     : lastname,\n        email        : email,\n        DepartmentId : department_id,\n        start_date   : start_date,\n        end_date     : (end_date || null),\n        admin        : admin,\n        auto_approve : auto_approve,\n    };\n\n    if (adjustment || String(adjustment) === '0') {\n      attributes.adjustment = adjustment;\n    }\n\n    if ( password ) {\n      attributes.password = password;\n    }\n\n    return attributes;\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "get_and_validate_user_parameters", "startLine": 946, "endLine": 1052, "startIndex": 28291, "endIndex": 31687, "reach": "globalNoExport", "reachName": "get_and_validate_user_parameters", "reachDetail": "rewire().__get__(get_and_validate_user_parameters)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/route/users/index.js", "function_name": "ensure_user_id_is_integer", "function_code": "function ensure_user_id_is_integer(args){\n    var req     = args.req,\n        user_id = args.user_id;\n\n    if (! validator.isInt(user_id)){\n        throw new Error(\n          'User '+req.user.id+' tried to edit user with non-integer ID: '+user_id\n        );\n    }\n\n    return;\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "ensure_user_id_is_integer", "startLine": 1054, "endLine": 1065, "startIndex": 31689, "endIndex": 31967, "reach": "globalNoExport", "reachName": "ensure_user_id_is_integer", "reachDetail": "rewire().__get__(ensure_user_id_is_integer)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/route/settings.js", "function_name": "get_and_validate_leave_type", "function_code": "function get_and_validate_leave_type(args) {\n  let\n    req       = args.req,\n    suffix    = args.suffix,\n    item_name = args.item_name;\n\n  // Get user parameters\n  let\n    name          = validator.trim(req.body['name__'+suffix]),\n    color        = validator.trim(req.body['color__'+suffix]) || 'leave_type_color_1',\n    limit        = validator.trim(req.body['limit__'+suffix]) || 0,\n    first_record = validator.trim(req.body['first_record'])   || 0,\n    use_allowance = validator.toBoolean(\n      req.body['use_allowance__'+suffix]\n    );\n\n  // If no name for leave type was provided: do nothing - treat case\n  // as no need to update the leave type\n  if ( ! name ) {\n    return false;\n  }\n\n  // VPP TODO move that into resusable component\n  let throw_user_error = function(message){\n    let error = new Error(message);\n    error.user_message = message;\n    throw error;\n  };\n\n  // Validate provided parameters\n  if ( ! validator.matches(color, /^leave_type_color_\\d+$/)) {\n    throw_user_error( 'New color for '+item_name+' should be valid css class' );\n  }\n\n  if ( ! validator.isNumeric(limit) ){\n    throw_user_error( 'New limit for '+item_name+' should be a valide number' );\n\n  } else if ( limit < 0) {\n    throw_user_error( 'New limit for '+item_name+' should be positive number or 0' );\n  }\n\n  return {\n    name          : name,\n    color         : color,\n    use_allowance : use_allowance,\n    limit         : limit,\n    sort_order    : ( (first_record && (String(first_record)===String(suffix))? 1 : 0) ),\n  };\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "get_and_validate_leave_type", "startLine": 504, "endLine": 552, "startIndex": 14827, "endIndex": 16354, "reach": "globalNoExport", "reachName": "get_and_validate_leave_type", "reachDetail": "rewire().__get__(get_and_validate_leave_type)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/route/settings.js", "function_name": "get_and_validate_ldap_auth_configuration", "function_code": "function get_and_validate_ldap_auth_configuration(args) {\n  var req = args.req;\n\n  // Get parameters\n  //\n  var url                      = validator.trim(req.body['url']),\n  binddn                       = validator.trim(req.body['binddn']),\n  bindcredentials              = validator.trim(req.body['bindcredentials']),\n  searchbase                   = validator.trim(req.body['searchbase']),\n  ldap_auth_enabled            = validator.toBoolean(req.body['ldap_auth_enabled']),\n  allow_unauthorized_cert      = validator.toBoolean(req.body['allow_unauthorized_cert']),\n\n  // Fetch the password of current user that is valid in LDAP system\n  password_to_check = validator.trim(req.body['password_to_check']);\n\n  // Validate provided parameters\n\n  if (!validator.matches(url, /^ldaps?:\\/\\/[a-z0-9\\.\\-]+:\\d+$/i)){\n    req.session.flash_error(\n      \"URL to LDAP server must be of following format: 'ldap://HOSTNAME:PORT'\"\n    );\n  }\n\n  if ( req.session.flash_has_errors() ) {\n    var error = new Error(\"Validation failed\");\n    error.show_to_user = true;\n    throw error;\n  }\n\n  // Return the configuration object\n  return {\n    ldap_config : {\n      url                     : url,\n      binddn                  : binddn,\n      bindcredentials         : bindcredentials,\n      searchbase              : searchbase,\n      allow_unauthorized_cert : allow_unauthorized_cert,\n    },\n    ldap_auth_enabled : ldap_auth_enabled,\n    password_to_check : password_to_check,\n  };\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "get_and_validate_ldap_auth_configuration", "startLine": 554, "endLine": 595, "startIndex": 16356, "endIndex": 17823, "reach": "globalNoExport", "reachName": "get_and_validate_ldap_auth_configuration", "reachDetail": "rewire().__get__(get_and_validate_ldap_auth_configuration)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/db/schedule.js", "function_name": "week_day_flag_setter", "function_code": "function week_day_flag_setter(flag_name) {\n  return function(v){ this.setDataValue(flag_name,  v ? works_whole_day() : works_none()) };\n}", "function_parameters": [{"type": "simple", "name": "flag_name", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "week_day_flag_setter", "startLine": 12, "endLine": 14, "startIndex": 244, "endIndex": 381, "reach": "globalNoExport", "reachName": "week_day_flag_setter", "reachDetail": "rewire().__get__(week_day_flag_setter)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/db/schedule.js", "function_name": "__direct_export__", "function_code": "function(sequelize, DataTypes){\n\n  var Schedule = sequelize.define(\"Schedule\", {\n    monday : {\n      type         : DataTypes.INTEGER,\n      allowNull    : false,\n      defaultValue : works_whole_day(),\n      set          : week_day_flag_setter('monday'),\n    },\n    tuesday : {\n      type         : DataTypes.INTEGER,\n      allowNull    : false,\n      defaultValue : works_whole_day(),\n      set          : week_day_flag_setter('tuesday'),\n    },\n    wednesday : {\n      type         : DataTypes.INTEGER,\n      allowNull    : false,\n      defaultValue : works_whole_day(),\n      set          : week_day_flag_setter('wednesday'),\n    },\n    thursday : {\n      type         : DataTypes.INTEGER,\n      allowNull    : false,\n      defaultValue : works_whole_day(),\n      set          : week_day_flag_setter('thursday'),\n    },\n    friday : {\n      type         : DataTypes.INTEGER,\n      allowNull    : false,\n      defaultValue : works_whole_day(),\n      set          : week_day_flag_setter('friday'),\n    },\n    saturday : {\n      type         : DataTypes.INTEGER,\n      allowNull    : false,\n      defaultValue : works_none(),\n      set          : week_day_flag_setter('saturday'),\n    },\n    sunday : {\n      type         : DataTypes.INTEGER,\n      allowNull    : false,\n      defaultValue : works_none(),\n      set          : week_day_flag_setter('sunday'),\n    },\n  },{\n\n    underscored     : true,\n    freezeTableName : true,\n    tableName       : 'schedule',\n\n    indexes : [\n      { fields : ['user_id'] },\n      { fields : ['company_id'] },\n    ],\n\n    classMethods: {\n      associate : function( models ) {\n        Schedule.belongsTo(models.Company, {as : 'company', foreignKey : 'company_id'});\n        Schedule.belongsTo(models.User, {as : 'user', foreignKey : 'user_id'});\n      },\n\n      promise_to_build_default_for : function(args){\n        var company_id = args.company_id,\n            user_id = args.user_id;\n\n        if ( ! company_id && ! user_id ) {\n          throw new Error('Needs to have either company_id or user_id');\n        }\n\n        var default_schedule = sequelize.models.Schedule.build({\n          company_id : company_id,\n          user_id    : user_id,\n        });\n\n        return Promise.resolve(default_schedule);\n      },\n    },\n\n    validate : {\n      relatesToEitherUserOrCompanyButNotBoth : function(){\n        if ( this.company_id && this.user_id ) {\n          console.error('company_id='+this.company_id+', user_id='+this.user_id);\n          throw new Error('Schedule should be connected either to company of to user but not to both');\n        }\n      },\n\n      relatesToUserOrCompany : function(){\n        if ( ! this.company_id && ! this.user_id ){\n          console.error('company_id='+this.company_id+', user_id='+this.user_id);\n          throw new Error('Schedule needs to be related to eaither company or user');\n        }\n      },\n    },\n\n    instanceMethods : {\n      is_user_specific : function() {\n        return !! this.user_id;\n      },\n\n      is_it_working_day : function(args){\n        var day = args.day;\n\n        if ( ! day ) {\n          throw new Error('\"is_it_working_day\" requires to have \"day\" parameter');\n        }\n\n        return this[ moment.utc(day).format('dddd').toLowerCase() ] === works_whole_day();\n      },\n\n      works_monday : function(){\n        return this.monday === works_whole_day();\n      },\n\n      works_tuesday : function(){\n        return this.tuesday === works_whole_day();\n      },\n\n      works_wednesday : function(){\n        return this.wednesday === works_whole_day();\n      },\n\n      works_thursday : function(){\n        return this.thursday === works_whole_day();\n      },\n\n      works_friday : function(){\n        return this.friday === works_whole_day();\n      },\n\n      works_saturday : function(){\n        return this.saturday === works_whole_day();\n      },\n\n      works_sunday : function(){\n        return this.sunday === works_whole_day();\n      },\n\n    },\n  });\n\n  return Schedule;\n}", "function_parameters": [{"type": "simple", "name": "sequelize", "variadic": false}, {"type": "simple", "name": "DataTypes", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "__direct_export__", "startLine": 16, "endLine": 158, "startIndex": 400, "endIndex": 4381, "reach": "direct", "reachDetail": "require()", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/route/integration_api.js", "function_name": "__direct_export__", "function_code": "passport => {\n\n  router.all(\n    /.*/,\n    passport.authenticate('bearer', { session: false }),\n    (req, res, next) => {\n      if ( req.isAuthenticated() ) {\n        return next();\n      }\n\n      return res.status(401).json({ ok : false});\n  });\n\n  router.get(\n    '/',\n    (_req, res) => res.json({ok : true})\n  );\n\n  router.get(\n    '/report/allowance',\n    (req, res) => {\n\n      const startDate = validator.isDate(req.query['start_date'])\n        ? moment.utc(req.query['start_date'])\n        : req.user.company.get_today();\n\n      const endDate = validator.isDate(req.query['end_date'])\n        ? moment.utc(req.query['end_date'])\n        : req.user.company.get_today();\n\n      const teamView = new TeamView({\n        user      : req.user,\n        start_date : startDate,\n        end_date   : endDate,\n      });\n\n      const currentDeparmentId  = validator.isNumeric(req.query['department'])\n        ? req.query['department']\n        : null;\n\n      Promise.join(\n        teamView.promise_team_view_details({\n          department_id : currentDeparmentId,\n        }),\n        req.user.get_company_with_all_leave_types(),\n        (teamViewDetails, company) => {\n          return teamView\n            .inject_statistics({\n              team_view_details : teamViewDetails,\n              leave_types       : company.leave_types,\n            })\n            .then(teamViewDetails => (\n              res.json({data : [\n                teamViewDetails.users_and_leaves.map(ul => ({\n                  userId: ul.user.id,\n                  userEmail: ul.user.email,\n                  userLastname: ul.user.lastname,\n                  userName: ul.user.name,\n                  leaveTypeBreakDown:  ul.statistics.leave_type_break_down.pretty_version,\n                  deductedDays: ul.statistics.deducted_days,\n                }))\n              ]})\n            ))\n        })\n        .catch(error => {\n          console.log(\n            'An error occured when user '+req.user.id+\n            ' tried to access /reports/allowancebytime page: '+error\n          );\n\n          res.json({ error })\n        });\n    \n    }\n  );\n\n  router.get(\n    '/report/absence',\n    (req,res) => {\n\n      const startDate = validator.isDate(req.query['start_date'])\n        ? moment.utc(req.query['start_date'])\n        : req.user.company.get_today();\n\n      const endDate = validator.isDate(req.query['end_date'])\n        ? moment.utc(req.query['end_date'])\n        : req.user.company.get_today();\n\n      const departmentId  = validator.isNumeric(req.query['department'])\n        ? req.query['department']\n        : null;\n\n      let result = getUsersWithLeaves({company:req.user.company, startDate, endDate, departmentId});\n\n      result = result\n        .then(data => res.json(data))\n        .catch(error => {\n          console.log(`An error occured when trying to access /report/absence: ${error} at ${error.stack}`);\n          res.json({ error: `${error}` });\n        });\n  });\n\n  router.get(\n    '/audit/',\n    (req,res) => {\n      getAudit({companyId: req.user.companyId})\n        .then(data => res.json(data))\n        .catch(error => {\n          console.log(`Failed to fetch Audit data: ${error} at ${error.stack}`);\n          res.json({ error: `${error}` });\n        });\n    }\n  );\n\n  return router;\n}", "function_parameters": [{"type": "simple", "name": "passport", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "__direct_export__", "startLine": 15, "endLine": 130, "startIndex": 382, "endIndex": 3663, "reach": "direct", "reachDetail": "require()", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/db/leave_type.js", "function_name": "__direct_export__", "function_code": "function(sequelize, DataTypes) {\n    var LeaveType = sequelize.define(\"LeaveType\", {\n        // TODO add validators!\n        name : {\n            type      : DataTypes.STRING,\n            allowNull : false\n        },\n        color : {\n            type         : DataTypes.STRING,\n            allowNull    : false,\n            defaultValue : '#ffffff',\n        },\n        use_allowance : {\n            type         : DataTypes.BOOLEAN,\n            allowNull    : false,\n            defaultValue : true,\n        },\n        limit : {\n            type         : DataTypes.INTEGER,\n            allowNull    : false,\n            defaultValue : 0,\n        },\n        sort_order : {\n          type         : DataTypes.INTEGER,\n          allowNull    : false,\n          defaultValue : 0,\n          comment      : \"Is used to determine sorting order of leave types\",\n        },\n    }, {\n        classMethods: {\n            associate : function( models ) {\n                LeaveType.belongsTo(models.Company, {as : 'company'});\n                LeaveType.hasMany(models.Leave, {as : 'leaves', foreignKey : 'leaveTypeId'});\n            },\n\n            generate_leave_types : function(args){\n                var company = args.company;\n\n                return LeaveType.bulkCreate([\n                    {\n                        name : 'Holiday',\n                        color : '#22AA66',\n                        companyId : company.id,\n                    },\n                    {\n                        name : 'Sick Leave',\n                        color : '#459FF3',\n                        companyId : company.id,\n                        limit : 10,\n                        use_allowance : 0,\n                    },\n                ])\n            },\n        },\n\n        instanceMethods : {\n          get_color_class : function() {\n            let value_in_db = this.color || '';\n\n            return value_in_db.match(/^\\s*\\#/)\n              ? 'leave_type_color_1'\n              : value_in_db;\n          }\n\n        }\n    });\n\n    return LeaveType;\n}", "function_parameters": [{"type": "simple", "name": "sequelize", "variadic": false}, {"type": "simple", "name": "DataTypes", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "__direct_export__", "startLine": 3, "endLine": 71, "startIndex": 32, "endIndex": 2071, "reach": "direct", "reachDetail": "require()", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/Report.js", "function_name": "filterLeaves", "function_code": "({startDate, endDate}) => (leave) => {\n  const sd = moment.utc(leave.get_start_leave_day().date);\n  const ed = moment.utc(leave.get_end_leave_day().date)\n  return (\n    (sd.isSameOrAfter(startDate, 'day') && sd.isSameOrBefore(endDate, 'day'))\n    ||\n    (ed.isSameOrAfter(startDate, 'day') && ed.isSameOrBefore(endDate, 'day'))\n  );\n}", "function_parameters": [{"type": "object_pattern", "keys": ["startDate", "endDate"], "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "filterLeaves", "startLine": 56, "endLine": 64, "startIndex": 1339, "endIndex": 1673, "reach": "globalNoExport", "reachName": "filterLeaves", "reachDetail": "rewire().__get__(filterLeaves)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": false, "paramCount": 1, "reason": "UnsupportedParameterNotSimple"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/Report.js", "function_name": "leaveIntoObject", "function_code": "(leave) => {\n\n  const dateFormat = 'YYYY-MM-DD';\n\n  const Leave = leave.sequelize.models.Leave;\n\n  const statusMap = {\n    [Leave.status_new()]:           'New',\n    [Leave.status_approved()]:      'Approved',\n    [Leave.status_rejected()]:      'Rejected',\n    [Leave.status_pended_revoke()]: 'Pended Revoke',\n    [Leave.status_canceled()]:      'Canceled',\n  };\n\n  return {\n    startDate:    moment.utc(leave.get_start_leave_day().date).format(dateFormat),\n    endDate:      moment.utc(leave.get_end_leave_day().date).format(dateFormat),\n    type:         leave.leave_type.name,\n    deductedDays: leave.get_deducted_days_number(),\n    approver:     (leave.approver ? leave.approver.full_name() : 'N/A'),\n    status:       statusMap[leave.status]||'Unknown',\n  };\n}", "function_parameters": [{"type": "simple", "name": "leave", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "leaveIntoObject", "startLine": 66, "endLine": 88, "startIndex": 1700, "endIndex": 2466, "reach": "globalNoExport", "reachName": "leaveIntoObject", "reachDetail": "rewire().__get__(leaveIntoObject)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/db/company.js", "function_name": "__direct_export__", "function_code": "function(sequelize, DataTypes) {\n  var Company = sequelize.define(\"Company\", {\n    // TODO add validators!\n    name : {\n      type      : DataTypes.STRING,\n      allowNull : false\n    },\n    country : {\n      type      : DataTypes.STRING,\n      allowNull : false\n    },\n    start_of_new_year : {\n      type      : DataTypes.INTEGER,\n      allowNull : false\n    },\n    share_all_absences : {\n        type         : DataTypes.BOOLEAN,\n        allowNull    : false,\n        defaultValue : false,\n    },\n    is_team_view_hidden : {\n      type         : DataTypes.BOOLEAN,\n      allowNull    : false,\n      defaultValue : false,\n      comment      : \"Determise if Team View is hidden for non-admin users\",\n    },\n    ldap_auth_enabled : {\n        type         : DataTypes.BOOLEAN,\n        allowNull    : false,\n        defaultValue : false,\n    },\n    ldap_auth_config : {\n        type      : DataTypes.STRING,\n        allowNull : true,\n        set : function(val){\n          if (! val || typeof val !== 'object'  ) {\n            val = JSON.stringify({});\n          }\n          this.setDataValue( 'ldap_auth_config', JSON.stringify(val) );\n        },\n\n        get : function(){\n          var val = this.getDataValue('ldap_auth_config');\n          try {\n            val = JSON.parse(val);\n          } catch(err) {\n            console.error(\n              'Faled to parse the LDAP settings saved in company %s. Error: %s',\n              this.id, err\n            );\n            val = {};\n          }\n\n          return val;\n        },\n    },\n    date_format : {\n      type         : DataTypes.STRING,\n      allowNull    : false,\n      defaultValue : 'YYYY-MM-DD',\n    },\n    company_wide_message : {\n      type         : DataTypes.TEXT,\n      allowNull    : true,\n      defaultValue : null,\n      comment      : 'Message shown to all users that belong to current company',\n    },\n    mode : {\n      type         : DataTypes.INTEGER,\n      allowNull    : false,\n      defaultValue : 1,\n      comment      : \"Indicate which mode the company account is in.\",\n    },\n    timezone : {\n      type         : DataTypes.TEXT,\n      allowNull    : true,\n      defaultValue : 'Europe/London',\n      comment      : 'Timezone current company is located in',\n    },\n    integration_api_enabled : {\n      type:         DataTypes.BOOLEAN,\n      allowNull:    false,\n      defaultValue: false,\n    },\n    integration_api_token : {\n      type         : DataTypes.UUID,\n      allowNull    : false,\n      defaultValue : () => uuidv4(),\n      comment      : \"Indicate which mode the company account is in.\",\n    },\n    carry_over : {\n      type         : DataTypes.INTEGER,\n      allowNull    : false,\n      defaultValue : 0,\n      comment      : \"Defines how may remaining days from allowance are carried over to the next year.\",\n    },\n  }, {\n\n    indexes : [\n      {\n        fields : ['id'],\n      }\n    ],\n\n    classMethods: {\n\n      associate : models => {\n        Company.hasMany(models.Department, {\n          as         : 'departments',\n          foreignKey : 'companyId',\n        });\n        Company.hasMany(models.User, {\n          as         : 'users',\n          foreignKey : 'companyId',\n        });\n        Company.hasMany(models.BankHoliday, {\n          as         : 'bank_holidays',\n          foreignKey : 'companyId',\n        });\n        Company.hasMany(models.LeaveType, {\n          as         : 'leave_types',\n          foreignKey : 'companyId',\n        });\n        Company.hasMany(models.EmailAudit, {\n          as         : 'audit_emails',\n          foreignKey : 'company_id',\n        });\n        Company.hasMany(models.Audit, {\n          as:         'audit',\n          foreignKey: 'companyId',\n        });\n      },\n\n      loadScope : function( models ) {\n\n        Company.addScope(\n          'with_all_users',\n          {\n            include : [\n              { model : models.User, as : 'users' },\n            ]\n          }\n        );\n\n        Company.addScope(\n          'with_audit',\n          {\n            include : [{ model: models.Audit, as: 'audit' }],\n          }\n        );\n\n        Company.addScope(\n          'with_active_users',\n          // The scope needs to be dynamic as the criteria for active users is based\n          // on current date, which could be buggy if left static\n          function() {\n            return { include : [{\n                model : models.User,\n                as : 'users',\n                where : models.User.get_active_user_filter(),\n              }]\n            }\n          }\n        );\n\n        Company.addScope(\n          'order_by_active_users',\n          {\n            order : [\n              [{model : models.User, as : 'users'}, 'lastname']\n            ]\n          }\n        );\n\n        Company.addScope(\n          'with_simple_departments',\n          {\n            include : [\n              { model : models.Department, as : 'departments' }\n            ]\n          }\n        );\n\n        Company.addScope(\n          'with_bank_holidays',\n          {\n            include : [{ model : models.BankHoliday, as : 'bank_holidays' }],\n          }\n        );\n\n        Company.addScope(\n          'order_by_bank_holidays',\n          {\n            order: [\n              [{model: models.BankHoliday, as: 'bank_holidays'}, 'date']\n            ]\n          }\n        );\n\n        Company.addScope(\n          'with_leave_types',\n          {\n            include : [{ model : models.LeaveType, as : 'leave_types' }]\n          }\n        );\n      },\n\n      scopeAssociate : function( models ) {\n        // Following code is here for reference only: to help declaring scopped\n        // associations in future. The approach is not suitable for active users\n        // bacause of its dynamic nature - we need to have up to date \"now\", which\n        // does not work nicely with accociations as they are installed once at the\n        // applicaiton start time, and if the app will be running for more than one\n        // day the active users association becomes wrong as it still remember the\n        // now as a date when the app was started\n        //\n//        Company.hasMany(models.User.scope('active'), {\n//          as         : 'activeUsers',\n//          foreignKey : 'companyId',\n//        });\n      },\n\n      // Return code for \"read-only holidays\" mode of company account.\n      // That means company only shows holidays/timeoff for emplyes and\n      // does not allow to create new ones.\n      //\n      get_mode_readonly_holidays : function(){\n        return 2;\n      },\n\n      // Create new company based on default values\n      create_default_company : function(args){\n        var country_code = args.country_code || 'UK',\n          timezone = args.timezone || 'Europe/London';\n\n        // Add new company record\n        return Company.create({\n            name              : args.name || 'New company',\n            country           : country_code,\n            start_of_new_year : 1,\n            timezone          : timezone,\n        })\n\n        // When new company is created - add default departments to it\n        .then(function(company){\n\n            return Promise.all([\n                sequelize.models.Department\n                    .create({\n                        name      : 'Sales',\n                        companyId : company.id,\n                    }),\n                sequelize.models.BankHoliday\n                    .generate_bank_holidays({\n                      company      : company,\n                      country_code : country_code,\n                    }),\n                sequelize.models.LeaveType\n                    .generate_leave_types({ company : company })\n            ])\n            .then(function(){\n\n                return Promise.resolve(company);\n            });\n        });\n\n      },\n\n      getCompanyByApiToken: ({token}) =>  sequelize.models\n        .Company\n        .scope('with_active_users')\n        .findOne({\n          where : {\n            integration_api_token: token,\n            integration_api_enabled: true,\n          }\n        }),\n\n    }, // End of calss methods\n\n    instanceMethods : {\n      /*\n       * Return name suitable to use for precessing by machines,\n       * actually it just remove spaces and replace them with \"_\"\n       *\n       * */\n      name_for_machine : function(){\n        return this.name.replace(/\\s+/g, '_');\n      },\n\n      reload_with_bank_holidays : function(){\n        var self = this;\n\n        return self.getBank_holidays()\n          .then(function(bank_holidays){\n            self.bank_holidays = bank_holidays;\n\n            return Promise.resolve(self);\n          });\n      },\n\n      get_ldap_server : function(){\n\n        var config = this.get('ldap_auth_config');\n        var tlsOptions = config.allow_unauthorized_cert ? { rejectUnauthorized: false } : {};\n\n        // When testing consider using TEST LDAP server\n        // http://www.forumsys.com/en/tutorials/integration-how-to/ldap/online-ldap-test-server/\n        var ldap = new LdapAuth({\n          url             : config.url,\n          bindDn          : config.binddn,\n          bindCredentials : config.bindcredentials,\n          searchBase      : config.searchbase,\n          searchFilter    : '(mail={{username}})',\n          cache           : false,\n          tlsOptions      : tlsOptions\n        });\n\n        return ldap;\n      },\n\n      get_moment_to_datepicker_map : function() {\n        return {\n          \"YYYY-MM-DD\" : 'yyyy-mm-dd',\n          \"YYYY/MM/DD\" : 'yyyy/mm/dd',\n          \"DD MMM, YY\" : 'dd M, yy',\n          \"DD/MM/YY\"   : \"dd/mm/yy\",\n          \"DD/MM/YYYY\" : \"dd/mm/yyyy\",\n          \"MM/DD/YY\"   : 'mm/dd/yy',\n        };\n      },\n\n      get_default_date_format : function() {\n        return this.getDataValue('date_format');\n      },\n\n      get_available_date_formats : function() {\n        var obj = this.get_moment_to_datepicker_map();\n        return _.keys( obj );\n      },\n\n      get_default_date_format_for_date_picker : function() {\n        var self = this;\n\n        var moment_to_datepicker_map = self.get_moment_to_datepicker_map();\n\n        if ( moment_to_datepicker_map.hasOwnProperty( self.get_default_date_format() ) ) {\n          return moment_to_datepicker_map[ self.get_default_date_format() ];\n        }\n\n        return 'yyyy-mm-dd';\n      },\n\n      // Takes date string in format specific for current company and produce string\n      // with date in generic format used internally within application\n      normalise_date : function(date_str) {\n        return moment.utc(date_str, this.get_default_date_format()).format('YYYY-MM-DD');\n      },\n\n      // Returns moment UTC-ed object that takes into consideration company time zone\n      // (p to day's precision)\n      get_today : function() {\n        let self = this;\n\n        return moment.utc(\n          moment_tz.utc().tz(self.timezone).format('YYYY-MM-DD')\n        );\n      },\n\n      regenerateIntegrationApiToken : function() {\n        const self = this;\n\n        self.set('integration_api_token', uuidv4());\n\n        return self.save();\n      },\n\n      // Promise schedule object valid for current company, if it does not have such\n      // in databse, retulr default one\n      promise_schedule : function(){\n        var self = this;\n\n        return self.sequelize.models.Schedule\n          .findOne({\n            where : { company_id : self.id },\n          })\n          .then(function(schedule){\n\n            if ( schedule) {\n              return Promise.resolve( schedule );\n            }\n\n            return self.sequelize.models.Schedule\n              .promise_to_build_default_for({ company_id : self.id });\n          });\n      },\n\n      // Return TRUE if company has restrictio on ly to show hollidays for its\n      // employees and prevent them from adding new ones\n      //\n      is_mode_readonly_holidays : function(){\n        return this.mode === Company.get_mode_readonly_holidays();\n      },\n\n    }\n  });\n\n  return Company;\n}", "function_parameters": [{"type": "simple", "name": "sequelize", "variadic": false}, {"type": "simple", "name": "DataTypes", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "__direct_export__", "startLine": 12, "endLine": 420, "startIndex": 261, "endIndex": 12174, "reach": "direct", "reachDetail": "require()", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/t/lib/mock_express_request.js", "function_name": "__direct_export__", "function_code": "function(args){\n\n    if (! args ) args = {};\n\n    var params = args.params || {},\n        error_messages = [];\n\n    var req = {\n        session : {},\n        user    : {\n          company : {\n            get_default_date_format : function() {'YYYY-MM-DD'},\n            normalise_date : function(date) { return date; },\n          },\n        },\n        body : params,\n    };\n\n    // Make request be aware of flash messages\n    require('../../lib/middleware/flash_messages')(req,{locals:{}},function(){});\n\n    return req;\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "__direct_export__", "startLine": 7, "endLine": 29, "startIndex": 107, "endIndex": 628, "reach": "direct", "reachDetail": "require()", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/leave_day.js", "function_name": "LeaveDay", "function_code": "function LeaveDay(args) {\n\n  // Make sure all required data is provided\n  _.each(\n    ['date', 'day_part', 'sequelize', 'leave_type_id'],\n    function(property){\n      if (! _.has(args, property)) {\n        throw new Error('No mandatory '+property+' was provided');\n      }\n    }\n  );\n\n  this.date          = args.date;\n  this.day_part      = args.day_part;\n  this.sequelize     = args.sequelize;\n  this.morning_leave_type_id = this.afternoon_leave_type_id = args.leave_type_id;\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "LeaveDay", "startLine": 18, "endLine": 34, "startIndex": 394, "endIndex": 874, "reach": "direct", "reachDetail": "require()", "hasReturn": false, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/error/index.js", "function_name": "throw_user_error", "function_code": "function throw_user_error(args) {\n  const validate_args = Joi.validate(args, schema_throw_user_error);\n\n  // Ensure all necesasry info was privided\n  if ( validate_args.error) {\n    // Tricky case here as we failed to rais exception, so log all data we have\n    // and still rais generic exception\n    console.log(\n      'throw_user_error got invalid parameters: '\n      + validate_args.annotate()\n    );\n    console.dir(args);\n    throw new Error('Failed to throw user errors');\n  }\n\n  let system_error_message,\n      user_error_message;\n\n  // Special case when user is lazy and specified generic error message to be\n  // used for system and customer level\n  if ( typeof args === 'string' ) {\n    system_error_message = user_error_message = args;\n  } else {\n    system_error_message = args.system_error;\n    user_error_message   = args.user_error;\n  }\n\n  let exception = new Error( system_error_message );\n\n  if ( user_error_message ) {\n    exception.user_error_message = user_error_message;\n  }\n\n  exception.tom_error = true;\n\n  throw exception;\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "throw_user_error", "startLine": 16, "endLine": 52, "startIndex": 227, "endIndex": 1276, "reach": "member", "reachNames": ["throw_user_error"], "reachDetail": "require().throw_user_error", "hasReturn": false, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/error/index.js", "function_name": "extract_system_error_message", "function_code": "function extract_system_error_message(error) {\n  if ( ! error ) {\n    return null;\n  }\n\n  return error;\n}", "function_parameters": [{"type": "simple", "name": "error", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "extract_system_error_message", "startLine": 54, "endLine": 60, "startIndex": 1278, "endIndex": 1383, "reach": "member", "reachNames": ["extract_system_error_message"], "reachDetail": "require().extract_system_error_message", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/error/index.js", "function_name": "extract_user_error_message", "function_code": "function extract_user_error_message(error) {\n  if ( ! error ) {\n    return null;\n  }\n\n  if (typeof error === 'string') {\n    return error;\n  }\n\n  if ( error.hasOwnProperty( 'user_error_message' )) {\n    return error.user_error_message;\n  }\n\n  return 'N/A';\n}", "function_parameters": [{"type": "simple", "name": "error", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "extract_user_error_message", "startLine": 62, "endLine": 76, "startIndex": 1385, "endIndex": 1643, "reach": "member", "reachNames": ["extract_user_error_message"], "reachDetail": "require().extract_user_error_message", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/route/validator/leave_request.js", "function_name": "__direct_export__", "function_code": "function(args){\n    var req = args.req;\n\n    var user           = validator.trim( req.body['user'] ),\n        leave_type     = validator.trim( req.body['leave_type'] ),\n        from_date      = validator.trim( req.body['from_date'] ),\n        from_date_part = validator.trim( req.body['from_date_part'] ),\n        to_date        = validator.trim( req.body['to_date'] ),\n        to_date_part   = validator.trim( req.body['to_date_part'] ),\n        reason         = validator.trim( req.body['reason'] );\n\n    if (user && !validator.isNumeric(user)){\n        req.session.flash_error('Incorrect employee');\n    }\n\n    if (!validator.isNumeric(leave_type)){\n        req.session.flash_error('Incorrect leave type');\n    }\n\n    var date_validator = function(date_str, label) {\n      try {\n\n        // Basic check\n        if (! date_str ) throw new Error(\"date needs to be defined\");\n\n        date_str = req.user.company.normalise_date(date_str);\n\n        // Ensure that normalisation went OK\n        if (! validator.isDate(date_str)) throw new Error(\"Invalid date format\");\n\n      } catch (e) {\n        console.log('Got an error ' + e);\n        req.session.flash_error(label + ' should be a date');\n      }\n    }\n\n    date_validator(from_date, 'From date');\n\n    if (  !validator.matches(from_date_part, /^[123]$/)\n       || !validator.matches(to_date_part, /^[123]$/)\n     ){\n        req.session.flash_error('Incorrect day part');\n    }\n\n    date_validator(to_date, 'To date');\n\n    // Check if it makes sence to continue validation (as following code relies on\n    // to and from dates to be valid ones)\n    if ( req.session.flash_has_errors() ) {\n      throw new Error( 'Got validation errors' );\n    }\n\n    // Convert dates inot format used internally\n    from_date = req.user.company.normalise_date(from_date);\n    to_date = req.user.company.normalise_date(to_date);\n\n    if (from_date.substr(0,4) !== to_date.substr(0,4)) {\n        req.session.flash_error('Current implementation does not allow inter year leaves. Please split your request into two parts');\n    }\n\n    if ( req.session.flash_has_errors() ) {\n      throw new Error( 'Got validation errors' );\n    }\n\n    var valid_attributes = {\n        leave_type     : leave_type,\n        from_date      : from_date,\n        from_date_part : from_date_part,\n        to_date        : to_date,\n        to_date_part   : to_date_part,\n        reason         : reason,\n    };\n\n    if ( user ) {\n        valid_attributes.user = user;\n    }\n\n    return new LeaveRequestParameters( valid_attributes );\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "__direct_export__", "startLine": 7, "endLine": 85, "startIndex": 150, "endIndex": 2695, "reach": "direct", "reachDetail": "require()", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/db/audit.js", "function_name": "__direct_export__", "function_code": "function(sequelize, DataTypes){\n\n  const Audit = sequelize.define(\"Audit\", {\n    entityType: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      comment: 'Type of the entity which change is tracked. E.g. USER, LEAVE etc',\n    },\n    entityId: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      comment: 'ID of the entity defined by entityType',\n    },\n    attribute: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      comment: 'Attribute of the entity which chnage is to be recorded',\n    },\n    oldValue: {\n      type: DataTypes.STRING,\n      allowNull: true,\n      comment: 'Old value converted to STRING',\n    },\n    newValue: {\n      type: DataTypes.STRING,\n      allowNull: true,\n      comment: 'New value converted to STRING',\n    },\n  }, {\n    underscored     : true,\n    freezeTableName : true,\n    timestamps      : true,\n    createdAt       : 'at',\n    updatedAt       : false,\n    tableName       : 'audit',\n\n    classMethods : {\n      associate : (models) => {\n        Audit.belongsTo(models.Company, {\n          as         : 'company',\n          foreignKey : 'companyId',\n        });\n\n        Audit.belongsTo(models.User, {\n          as: 'byUser',\n          foreignKey: 'byUserId',\n        });\n      },\n    },\n\n  });\n\n  return Audit;\n}", "function_parameters": [{"type": "simple", "name": "sequelize", "variadic": false}, {"type": "simple", "name": "DataTypes", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "__direct_export__", "startLine": 4, "endLine": 57, "startIndex": 33, "endIndex": 1314, "reach": "direct", "reachDetail": "require()", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/comment.js", "function_name": "commentLeave", "function_code": "({leave, comment, companyId}) => {\n  return Models.Comment.create({\n    entityType: Models.Comment.getEntityTypeLeave(),\n    entityId: leave.id,\n    comment,\n    companyId,\n    byUserId: leave.userId,\n  });\n}", "function_parameters": [{"type": "object_pattern", "keys": ["leave", "comment", "companyId"], "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "commentLeave", "startLine": 8, "endLine": 16, "startIndex": 106, "endIndex": 314, "reach": "member", "reachNames": ["commentLeave"], "reachDetail": "require().commentLeave", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": false, "paramCount": 1, "reason": "UnsupportedParameterNotSimple"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/comment.js", "function_name": "getCommentsForLeave", "function_code": "({leave}) => {\n  return Models.Comment.findAll({\n    raw: true,\n    where : {\n      entityType: Models.Comment.getEntityTypeLeave(),\n      entityId: leave.id,\n    },\n  });\n}", "function_parameters": [{"type": "object_pattern", "keys": ["leave"], "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "getCommentsForLeave", "startLine": 18, "endLine": 26, "startIndex": 345, "endIndex": 518, "reach": "member", "reachNames": ["getCommentsForLeave"], "reachDetail": "require().getCommentsForLeave", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": false, "paramCount": 1, "reason": "UnsupportedParameterNotSimple"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20181213-carry-over-conf.js", "function_name": "up", "function_code": "(queryInterface, Sequelize) => {\n\n    queryInterface.describeTable('Companies').then((attributes) => {\n\n      if (attributes.hasOwnProperty('carry_over')) {\n        return 1;\n      }\n\n      return queryInterface.addColumn(\n        'Companies',\n        'carry_over',\n        models.Company.attributes.carry_over\n      );\n    });\n  }", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "up", "startLine": 7, "endLine": 21, "startIndex": 85, "endIndex": 416, "reach": "member", "reachNames": ["up"], "reachDetail": "require().up", "hasReturn": false, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20181213-carry-over-conf.js", "function_name": "down", "function_code": "function (queryInterface, Sequelize) {\n    return queryInterface.removeColumn('Companies', 'carry_over');\n  }", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "down", "startLine": 23, "endLine": 25, "startIndex": 427, "endIndex": 536, "reach": "member", "reachNames": ["down"], "reachDetail": "require().down", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20170530-add_auto_approve_flag_to_user.js", "function_name": "up", "function_code": "function (queryInterface, Sequelize) {\n\n    queryInterface.describeTable('Users').then(function(attributes){\n\n      if (attributes.hasOwnProperty('auto_approve')) {\n        return 1;\n      }\n\n      return queryInterface.addColumn(\n        'Users',\n        'auto_approve',\n        models.User.attributes.auto_approve\n      );\n    });\n\n  }", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "up", "startLine": 7, "endLine": 22, "startIndex": 83, "endIndex": 420, "reach": "member", "reachNames": ["up"], "reachDetail": "require().up", "hasReturn": false, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20170530-add_auto_approve_flag_to_user.js", "function_name": "down", "function_code": "function (queryInterface, Sequelize) {\n    return queryInterface.removeColumn('Users', 'auto_approve');\n  }", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "down", "startLine": 24, "endLine": 26, "startIndex": 431, "endIndex": 538, "reach": "member", "reachNames": ["down"], "reachDetail": "require().down", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/t/lib/user_info.js", "function_name": "__direct_export__", "function_code": "function(args){\n  return args.driver.call(function(){return user_info_func(args)});\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "__direct_export__", "startLine": 86, "endLine": 88, "startIndex": 1739, "endIndex": 1824, "reach": "direct", "reachDetail": "require()", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/middleware/session_aware_redirect.js", "function_name": "__direct_export__", "function_code": "function(req, res, next){\n\n   res.redirect_with_session = function(a,b){\n\n        if (arguments.length === 2) {\n            req.session.save(function(){\n                res.redirect(a,b);\n            });\n        } else {\n            req.session.save(function(){\n                res.redirect(a);\n            });\n        }\n        return true;\n    };\n\n    next();\n}", "function_parameters": [{"type": "simple", "name": "req", "variadic": false}, {"type": "simple", "name": "res", "variadic": false}, {"type": "simple", "name": "next", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "__direct_export__", "startLine": 17, "endLine": 34, "startIndex": 511, "endIndex": 874, "reach": "direct", "reachDetail": "require()", "hasReturn": false, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 3, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/mixin/user/absence_aware.js", "function_name": "__direct_export__", "function_code": "function(sequelize){\n\n  this._get_calendar_months_to_show = function(args){\n    var\n      self           = this,\n      year           = args.year,\n      show_full_year = args.show_full_year;\n\n    if (show_full_year) {\n      return _.map([1,2,3,4,5,6,7,8,9,10,11,12], function(i){\n        return moment.utc(year.format('YYYY')+'-'+i+'-01');\n      });\n    }\n\n    return _.map([0,1,2,3], function(delta){\n      return self.company.get_today().add(delta, 'months').startOf('month');\n    })\n  };\n\n\n  this.promise_calendar = function(args) {\n    var\n      this_user      = this,\n      year           = args.year || this_user.company.get_today(),\n      show_full_year = args.show_full_year || false,\n      model          = sequelize.models,\n      // Find out if we need to show multi year calendar\n      is_multi_year = this_user.company.get_today().month() > 8;\n\n    var months_to_show = this_user._get_calendar_months_to_show({\n      year           : year.clone(),\n      show_full_year : show_full_year\n    });\n\n    return Promise.join(\n\n      Promise.try(() => this_user.getDepartment()),\n\n      Promise.try(() => this_user.getCompany({\n        scope : ['with_bank_holidays', 'with_leave_types']\n      })),\n\n      Promise.try(function(){\n        return this_user.getMy_leaves({\n          where : {\n            $and : [\n              { status : { $ne : sequelize.models.Leave.status_rejected() } },\n              { status : { $ne : sequelize.models.Leave.status_canceled() } },\n            ],\n            $or : {\n              date_start : {\n                $between : [\n                  moment.utc(year).startOf('year').format('YYYY-MM-DD'),\n                  moment.utc(\n                    year.clone().add((is_multi_year ? 1 : 0), 'years')\n                  ).endOf('year').format('YYYY-MM-DD HH:mm'),\n                ]\n              },\n              date_end : {\n                $between : [\n                  moment.utc( year ).startOf('year').format('YYYY-MM-DD'),\n                  moment.utc(\n                    year.clone().add((is_multi_year ? 1 : 0), 'years')\n                  ).endOf('year').format('YYYY-MM-DD HH:mm'),\n                ]\n              }\n            }\n          },\n        });\n      }),\n\n      Promise.try(() => this_user.promise_schedule_I_obey()),\n\n      function(department, company, leaves, schedule){\n        var leave_days = _.flatten( _.map(leaves, function(leave){\n          return _.map( leave.get_days(), function(leave_day){\n            leave_day.leave = leave;\n            return leave_day;\n          });\n        }));\n\n        return Promise.resolve(\n          _.map(months_to_show, function(month){\n            return new CalendarMonth(\n              month,\n              {\n                bank_holidays :\n                  department.include_public_holidays\n                    ? company.bank_holidays\n                    : [],\n                leave_days : leave_days,\n                schedule   : schedule,\n                today      : company.get_today(),\n                leave_types: company.leave_types,\n              }\n            );\n          })\n        );\n      }\n\n    ); // End of join\n  };\n\n\n  this.validate_overlapping = function(new_leave_attributes) {\n    var this_user = this;\n\n    var days_filter = {\n      $between : [\n        new_leave_attributes.from_date,\n        moment.utc(new_leave_attributes.to_date)\n          .add(1,'days').format('YYYY-MM-DD'),\n      ],\n    };\n\n    return this_user.getMy_leaves({\n      where : {\n        $and : [\n          { status : { $ne : sequelize.models.Leave.status_rejected() } },\n          { status : { $ne : sequelize.models.Leave.status_canceled() } },\n        ],\n\n        $or : {\n          date_start : days_filter,\n          date_end : days_filter,\n        },\n      },\n    })\n\n    .then(function(overlapping_leaves){\n\n      // Check there are overlapping leaves\n      if (overlapping_leaves.length === 0){\n          return Promise.resolve(1);\n      }\n\n      var overlapping_leave = overlapping_leaves[0];\n\n      if (overlapping_leave.fit_with_leave_request(\n            new_leave_attributes\n      )){\n          return Promise.resolve(1);\n      }\n\n      // Otherwise it is overlapping!\n      var error = new Error('Overlapping booking!');\n      error.user_message = 'Overlapping booking!';\n      throw error;\n\n    });\n  }; // end of validate_overlapping\n\n\n  // Promise all leaves requested by current user, regardless\n  // their statuses\n  //\n  this.promise_my_leaves = function(args){\n\n    var self         = this,\n        where_clause = {},\n        // Time zone does not really matter here, although there could be issues\n        // around New Year (but we can tolerate that)\n        year         = args.year || moment.utc();\n\n    if (args && args.filter_status) {\n      where_clause = { status : args.filter_status };\n    }\n\n    if (args && ! args.ignore_year) {\n      where_clause['$or'] = {\n        date_start : {\n          $between : [\n            moment.utc(year).startOf('year').format('YYYY-MM-DD'),\n            moment.utc(year).endOf('year').format('YYYY-MM-DD HH:mm'),\n          ]\n        },\n        date_end : {\n          $between : [\n            moment.utc(year).startOf('year').format('YYYY-MM-DD'),\n            moment.utc(year).endOf('year').format('YYYY-MM-DD HH:mm'),\n          ]\n        }\n      };\n    }\n\n    var promise_my_leaves = this.getMy_leaves({\n      // TODO here is cartesian product between leave types and users,\n      // needs to be split\n      include : [{\n        model : sequelize.models.LeaveType,\n        as    : 'leave_type',\n      },{\n        model : sequelize.models.User,\n        as    : 'user',\n        include : [{\n          model : sequelize.models.Company,\n          as : 'company',\n          include : [{\n            model : sequelize.models.BankHoliday,\n            as : 'bank_holidays',\n          }],\n        }],\n      }],\n      where : where_clause,\n    })\n\n    // Fetch approvers for each leave in separate query, to avoid cartesian\n    // products.\n    .then(function(leaves){\n\n      leaves.forEach(function(leave){ leave.user.cached_schedule = self.cached_schedule; });\n\n      return Promise.resolve(leaves)\n        .map(\n          function(leave){\n            return leave.promise_approver()\n            .then(function(approver){\n              leave.approver = approver;\n              return Promise.resolve(leave);\n            });\n          }, {\n            concurrency : 10,\n          }\n        );\n    })\n\n    .then(leaves => LeaveCollectionUtil.promise_to_sort_leaves(leaves));\n\n    return promise_my_leaves;\n  };\n\n\n  this.promise_my_active_leaves = function(args) {\n    var year = args.year || moment.utc();\n\n    return this.promise_my_leaves({\n      year          : year,\n      filter_status : [\n        sequelize.models.Leave.status_approved(),\n        sequelize.models.Leave.status_new(),\n        sequelize.models.Leave.status_pended_revoke(),\n      ],\n    })\n    .then(leaves => LeaveCollectionUtil.promise_to_sort_leaves(leaves));\n  };\n\n  // Promises leaves ever booked for current user\n  this.promise_my_active_leaves_ever = function() {\n\n    return this.promise_my_leaves({\n      ignore_year : true,\n      filter_status : [\n        sequelize.models.Leave.status_approved(),\n        sequelize.models.Leave.status_new(),\n        sequelize.models.Leave.status_pended_revoke(),\n      ],\n    })\n    .then(leaves => LeaveCollectionUtil.promise_to_sort_leaves(leaves));\n  };\n\n\n  // Promise leaves that are needed to be Approved/Rejected\n  //\n  this.promise_leaves_to_be_processed = function(){\n    let self = this;\n\n    return self\n      .promise_supervised_users()\n      .then(users => {\n        return sequelize.models.Leave.findAll({\n          include : [{\n            model : sequelize.models.LeaveType,\n            as    : 'leave_type',\n          },{\n            model : sequelize.models.User,\n            as    : 'user',\n            include : [{\n              model : sequelize.models.Company,\n              as : 'company',\n              include : [{\n                model : sequelize.models.BankHoliday,\n                as    : 'bank_holidays',\n              }],\n            },{\n              model : sequelize.models.Department,\n              as    : 'department',\n            }],\n          }],\n          where : {\n            status : [\n              sequelize.models.Leave.status_new(),\n              sequelize.models.Leave.status_pended_revoke()\n            ],\n            userId : users.map(u => u.id),\n          },\n        })\n      })\n      .then( leaves => Promise\n        .resolve(leaves)\n        .map(\n          leave => leave.user.promise_schedule_I_obey(),\n          { concurrency : 10 }\n        )\n        .then( () => Promise.resolve(leaves) )\n        .then(leaves => LeaveCollectionUtil.promise_to_sort_leaves(leaves))\n      );\n  }; // END of promise_leaves_to_be_processed\n\n  this.promise_cancelable_leaves = function(){\n    var self = this;\n\n    return self.promise_my_leaves({\n      ignore_year : true,\n      filter_status : [ sequelize.models.Leave.status_new() ],\n    })\n    .then(function(leaves){\n      return Promise.map(leaves, function(leave){\n        return leave.user.promise_schedule_I_obey();\n      },{\n        concurrency : 10,\n      })\n      .then(function(){ return Promise.resolve(leaves) })\n      .then(leaves => LeaveCollectionUtil.promise_to_sort_leaves(leaves));\n    });\n  };\n\n\n  this.calculate_number_of_days_taken_from_allowance = function(args){\n    var self = this,\n        leave_type = args ? args.leave_type : null,\n        leaves_to_traverse = this.my_leaves || [];\n\n\n    leaves_to_traverse.forEach(function(leave){ leave.user.cached_schedule = self.cached_schedule; });\n\n    // If leave_type was provided, we care only about leaves of that type\n    if (leave_type) {\n      leaves_to_traverse = _.filter(\n        leaves_to_traverse,\n        function(leave){ return leave.leaveTypeId === leave_type.id; }\n      );\n    }\n\n    return _.reduce(\n      _.map(\n        _.filter(\n          leaves_to_traverse,\n          function (leave){ return leave.is_approved_leave(); }\n        ),\n        function(leave){ return leave.get_deducted_days_number(args); }\n      ),\n      function(memo, num){ return memo + num },\n      0\n    ) || 0;\n  };\n\n\n  // Based on leaves attached to the current user object,\n  // the method does not perform any additional queries\n  //\n  this.get_leave_statistics_by_types = function(args){\n\n    if (! args ) args = {};\n\n    var statistics = {},\n      limit_by_top = args.limit_by_top || false;\n\n    this.company.leave_types.forEach(function(leave_type){\n      var initial_stat = {\n        leave_type : leave_type,\n        days_taken : 0,\n      };\n      if (leave_type.limit && leave_type.limit > 0) {\n        initial_stat.limit = leave_type.limit;\n      }\n      statistics[leave_type.id] = initial_stat;\n    });\n\n    // Calculate statistics as an object\n    _.filter(\n      this.my_leaves,\n      function (leave){ return leave.is_approved_leave() }\n    )\n    .forEach(\n      function(leave){\n\n        var stat_obj = statistics[leave.leave_type.id];\n\n        stat_obj.days_taken = stat_obj.days_taken + leave.get_deducted_days_number({\n          ignore_allowance : true,\n        });\n      }\n    );\n\n    var statistic_arr = _.map(\n      _.pairs(statistics),\n      function(pair){\n        return pair[1];\n      }\n    );\n\n    statistic_arr = _.sortBy(\n        statistic_arr,\n        'days_taken'\n      )\n      .reverse();\n\n\n    if (limit_by_top) {\n      statistic_arr = _.first(statistic_arr, 4);\n    }\n\n    return _.sortBy(statistic_arr, function(rec){ return rec.leave_type.name; });\n  },\n\n\n  this.promise_adjustment_and_carry_over_for_year = function(year){\n    let self = this;\n\n    year = year || moment.utc();\n    year = moment.utc(year).format('YYYY');\n\n    return self\n      .getAdjustments({\n        where : { year : year }\n      })\n      .then(adjustment_records => {\n\n        // By deafault there is not adjustments\n        let result = {\n          adjustment : 0,\n          carried_over_allowance : 0,\n        };\n\n        if (adjustment_records.length === 1) {\n          result.adjustment = adjustment_records[0].adjustment;\n          result.carried_over_allowance = adjustment_records[0].carried_over_allowance;\n        }\n\n        return Promise.resolve(result);\n      });\n  };\n\n  this.promise_adjustmet_for_year = function(year){\n    let self = this;\n\n    return self\n      .promise_adjustment_and_carry_over_for_year(year)\n      .then(combined_record => Promise.resolve(combined_record.adjustment));\n  };\n\n  this.promise_carried_over_allowance_for_year = function(year){\n    let self = this;\n\n    return self\n      .promise_adjustment_and_carry_over_for_year(year)\n      .then(combined_record => Promise.resolve(combined_record.carried_over_allowance));\n  };\n\n  this.promise_to_update_adjustment = function(args) {\n    let\n      self = this,\n      year = args.year || moment.utc().format('YYYY'),\n      adjustment = args.adjustment;\n\n    // Update related allowance adjustement record\n    return sequelize.models.UserAllowanceAdjustment\n      .findOrCreate({\n        where : {\n          user_id : self.id,\n          year    : year,\n        },\n        defaults : { adjustment : adjustment },\n      })\n      .spread((record, created) => {\n\n        if ( created ) {\n          return Promise.resolve();\n        }\n\n        record.set('adjustment', adjustment);\n\n        return record.save();\n      });\n  };\n\n  this.promise_to_update_carried_over_allowance = function(args) {\n    let\n      self = this,\n      year = args.year || moment.utc().format('YYYY'),\n      carried_over_allowance = args.carried_over_allowance;\n\n    // Update related allowance adjustement record\n    return sequelize.models.UserAllowanceAdjustment\n      .findOrCreate({\n        where : {\n          user_id : self.id,\n          year    : year,\n        },\n        defaults : { carried_over_allowance : carried_over_allowance },\n      })\n      .spread((record, created) => {\n\n        if ( created ) {\n          return Promise.resolve();\n        }\n\n        record.set('carried_over_allowance', carried_over_allowance);\n\n        return record.save();\n      });\n  };\n\n\n  this.promise_my_leaves_for_calendar = function(args){\n    var year = args.year || this.company.get_today();\n\n    return this.getMy_leaves({\n      where : {\n\n        $and : [\n          { status : { $ne : sequelize.models.Leave.status_rejected() } },\n          { status : { $ne : sequelize.models.Leave.status_canceled() } },\n        ],\n\n        $or : {\n          date_start : {\n            $between : [\n              moment.utc(year).startOf('year').format('YYYY-MM-DD'),\n              moment.utc(year).endOf('year').format('YYYY-MM-DD HH:mm'),\n            ]\n          },\n          date_end : {\n            $between : [\n              moment.utc(year).startOf('year').format('YYYY-MM-DD'),\n              moment.utc(year).endOf('year').format('YYYY-MM-DD HH:mm'),\n            ]\n          }\n        }\n      },\n    }); // End of MyLeaves\n  };\n\n  // For given leave object (not necessary one with corresponding record in DB)\n  // check if current user is capable to have it, that is if user's remaining\n  // vacation allowance is big enough to accommodate the leave.\n  //\n  // If validation fails an exceptionis thrown.\n  //\n  this.validate_leave_fits_into_remaining_allowance = function(args){\n    var self   = this,\n    leave_type = args.leave_type,\n    leave      = args.leave,\n    // Derive year from Leave object\n    year       = args.year || moment.utc(leave.date_start);\n\n    // Make sure object contain all necessary data for that check\n    return self.reload_with_leave_details({\n      year : year.clone(),\n    })\n    .then( employee => employee.reload_with_session_details() )\n    .then(employee => employee.company.reload_with_bank_holidays()\n      .then(() => Promise.resolve(employee))\n    )\n    .then(employee =>\n      employee.promise_allowance({year})\n      .then(allowance_obj => Promise.resolve([allowance_obj.number_of_days_available_in_allowance, employee]))\n    )\n    .then(function(args){\n      let days_remaining_in_allowance = args[0],\n        employee = args[1];\n\n      let deducted_days =  leave.get_deducted_days_number({\n          year       : year.format('YYYY'),\n          user       : employee,\n          leave_type : leave_type,\n        });\n\n      // Throw an exception when less than zero vacation would remain\n      // if we add currently requested absence\n      if (\n        days_remaining_in_allowance - deducted_days < 0\n      ) {\n\n        var error = new Error('Requested absence is longer than remaining allowance');\n        error.user_message = error.toString();\n        throw error;\n      }\n\n      return Promise.resolve(employee);\n    })\n\n    // Check that adding new leave of this type will not exceed maximum limit of\n    // that type (if it is defined)\n    .then(function(employee){\n      if (\n        // There is a limit for current type\n        leave_type.limit\n        // ... and lemit is bigger than zero\n        && leave_type.limit > 0\n      ) {\n\n        // ... sum of used dayes for this limit is going to be bigger then limit\n        var would_be_used = employee.calculate_number_of_days_taken_from_allowance({\n            year             : year.format('YYYY'),\n            leave_type       : leave_type,\n            ignore_allowance : true,\n          })\n            +\n          leave.get_deducted_days_number({\n            year             : year.format('YYYY'),\n            user             : employee,\n            leave_type       : leave_type,\n            ignore_allowance : true,\n          });\n\n        if (would_be_used > leave_type.limit) {\n\n          var error = new Error('Adding requested '+leave_type.name\n            +\" absence would exceed maximum allowed for such type by \"\n            +(would_be_used - leave_type.limit)\n          );\n\n          error.user_message = error.toString();\n          throw error;\n        }\n      }\n\n      return Promise.resolve();\n    });\n  };\n\n}", "function_parameters": [{"type": "simple", "name": "sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "__direct_export__", "startLine": 17, "endLine": 649, "startIndex": 410, "endIndex": 18405, "reach": "direct", "reachDetail": "require()", "hasReturn": false, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/t/integration/team_view/basic_wall_chart.js", "function_name": "check_teamview", "function_code": "function check_teamview(data, emails){\n\n  return open_page_func({\n    url    : application_host + 'calendar/teamview/',\n    driver : data.driver,\n  })\n  .then(function(data){\n    var promise_to_check = data.driver\n      .findElements(By.css( 'tr.teamview-user-list-row > td.left-column-cell' ))\n\n      // Make sure that number of users is as expected\n      .then(function(elements){\n\n        expect(elements.length).to.be.equal( emails.length );\n\n        return Promise.all(_.map(elements, function(el){ return el.getText();  }));\n      })\n\n      // Make sure that users are actually those as expected\n      .then(function(full_names){\n\n        // The idea is to extract unique tokens from provided emails\n        var tokens_from_emails = _.map(emails, function(email){\n          return email.substring(0, email.lastIndexOf(\"@\"));\n        }).sort();\n\n        // ... extract unique tokens from full names on the page\n        var tokens_from_name = _.map(full_names, function(name){\n          return name.substring(4, name.lastIndexOf(\" \"));\n        }).sort();\n\n        // ... and make sure that they are matched\n        expect( tokens_from_emails ).to.be.eql(tokens_from_name);\n\n        return Promise.resolve(data);\n      });\n\n    return promise_to_check;\n  });\n}", "function_parameters": [{"type": "simple", "name": "data", "variadic": false}, {"type": "simple", "name": "emails", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "check_teamview", "startLine": 50, "endLine": 89, "startIndex": 2111, "endIndex": 3374, "reach": "globalNoExport", "reachName": "check_teamview", "reachDetail": "rewire().__get__(check_teamview)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/db/email_audit.js", "function_name": "__direct_export__", "function_code": "function(sequelize, DataTypes){\n  var EmailAudit = sequelize.define(\"EmailAudit\", {\n    email : {\n      type      : DataTypes.STRING,\n      allowNull : false,\n    },\n    subject : {\n      type      : DataTypes.TEXT,\n      allowNull : false,\n    },\n    body : {\n      type      : DataTypes.TEXT,\n      allowNull : false,\n    },\n  },{\n    underscored     : true,\n    freezeTableName : true,\n    timestamps      : true,\n    createdAt       : 'created_at',\n    updatedAt       : false,\n    indexes : [{\n      fields : [ 'created_at' ],\n    },{\n      fields : [ 'user_id' ],\n    }],\n\n    classMethods : {\n      associate : function(models) {\n\n        EmailAudit.belongsTo(models.Company, {\n          as         : 'company',\n          foreignKey : 'company_id',\n        });\n\n\n        EmailAudit.belongsTo(models.User, {\n          as         : 'user',\n          foreignKey : 'user_id',\n        });\n      },\n    },\n\n    instanceMethods : {\n      // Present the email body as a text, strips off any html tags etc\n      //\n      body_as_text : function(){\n        return this.body.indexOf('DOCTYPE') > 0 ? htmlToText.fromString(this.body) : this.body;\n      },\n    },\n\n  });\n\n  return EmailAudit;\n}", "function_parameters": [{"type": "simple", "name": "sequelize", "variadic": false}, {"type": "simple", "name": "DataTypes", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "__direct_export__", "startLine": 7, "endLine": 60, "startIndex": 80, "endIndex": 1268, "reach": "direct", "reachDetail": "require()", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/passport/index.js", "function_name": "prepare_user_for_session", "function_code": "function prepare_user_for_session(args) {\n  var user = args.user,\n      done = args.done;\n\n  user.maybe_activate()\n    .then(function(user){\n      return user.reload_with_session_details();\n    })\n    .then(function(){\n      done(null, user);\n    });\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "prepare_user_for_session", "startLine": 22, "endLine": 33, "startIndex": 558, "endIndex": 810, "reach": "globalNoExport", "reachName": "prepare_user_for_session", "reachDetail": "rewire().__get__(prepare_user_for_session)", "hasReturn": false, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/passport/index.js", "function_name": "authenticate_user", "function_code": "function authenticate_user(args){\n\n  var user = args.user,\n  password = args.password,\n  done     = args.done,\n  email    = user.email;\n\n  // In case of LDAP authentification connect the LDAP server\n  if ( user.company.ldap_auth_enabled ) {\n\n// email = 'euler@ldap.forumsys.com'; password = 'password'; // TODO remove\n    Promise.resolve( user.company.get_ldap_server() )\n      .then(function(ldap_server){\n\n      ldap_server.authenticate(email, password, function (err, u) {\n        if (err) {\n          console.log(\"LDAP auth error: %s\", err);\n          return done(null, false);\n        }\n        prepare_user_for_session({\n          user : user,\n          done : done,\n        });\n      });\n\n      ldap_server.close();\n    })\n    .catch(function(error){\n      console.error('Failed while trying to deal with LDAP server with error: %s', error);\n\n      done(null, false);\n    });\n\n  // Provided password is correct\n  } else if (user.is_my_password(password)) {\n\n    prepare_user_for_session({\n      user : user,\n      done : done,\n    });\n\n  // User exists but provided password does not match\n  } else {\n      console.error(\n        'When login user entered existsing email ' +email+\n        ' but incorrect password'\n      );\n      done(null, false);\n  }\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "authenticate_user", "startLine": 40, "endLine": 89, "startIndex": 999, "endIndex": 2260, "reach": "globalNoExport", "reachName": "authenticate_user", "reachDetail": "rewire().__get__(authenticate_user)", "hasReturn": false, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/passport/index.js", "function_name": "strategy_handler", "function_code": "function strategy_handler(email, password, done) {\n\n  // Normalize email to be in lower case\n  email = email.toLowerCase();\n\n  model.User\n    .find_by_email( email )\n    .then(function(user){\n\n      // Case when no user for provided email\n      if ( ! user ) {\n        console.error(\n          'At login: failed to find user with provided email %s', email\n        );\n\n        // We need to abort the execution of current callback function\n        // hence the return before calling \"done\" callback\n        return done(null, false);\n      }\n\n      // Athenticate user by provided password\n      user.getCompany()\n        .then(function(company){\n\n          // We need to have company for user fetchef dow the line so query it now\n          user.company = company;\n\n          authenticate_user({\n            user     : user,\n            password : password,\n            done     : done,\n          });\n        });\n    })\n\n    // there was unknown error when trying to retrieve user object\n    .catch(function(error){\n      console.error(\n        'At login: unknown error when trying to login in as %s. Error: %s',\n        email, error\n      );\n\n      done(null, false);\n    });\n}", "function_parameters": [{"type": "simple", "name": "email", "variadic": false}, {"type": "simple", "name": "password", "variadic": false}, {"type": "simple", "name": "done", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "strategy_handler", "startLine": 91, "endLine": 135, "startIndex": 2262, "endIndex": 3438, "reach": "globalNoExport", "reachName": "strategy_handler", "reachDetail": "rewire().__get__(strategy_handler)", "hasReturn": false, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 3, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20171222-add-carry-over-allowance-column.js", "function_name": "up", "function_code": "function (queryInterface, Sequelize) {\n\n    return queryInterface.describeTable('user_allowance_adjustment')\n      .then(function(attributes){\n\n        if (attributes.hasOwnProperty('carried_over_allowance')) {\n          return 1;\n        }\n\n        return queryInterface.addColumn(\n          'user_allowance_adjustment',\n          'carried_over_allowance',\n          models.UserAllowanceAdjustment.attributes.carried_over_allowance\n        );\n      });\n  }", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "up", "startLine": 7, "endLine": 22, "startIndex": 83, "endIndex": 540, "reach": "member", "reachNames": ["up"], "reachDetail": "require().up", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20171222-add-carry-over-allowance-column.js", "function_name": "down", "function_code": "function (queryInterface, Sequelize) {\n    return queryInterface\n      .removeColumn('user_allowance_adjustment', 'carried_over_allowance');\n  }", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "down", "startLine": 24, "endLine": 27, "startIndex": 551, "endIndex": 695, "reach": "member", "reachNames": ["down"], "reachDetail": "require().down", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/view/helpers.js", "function_name": "as_date_formatted", "function_code": "function(date_str, format, options) {\n\n  if (! date_str) return '';\n\n  if ( ! format ) {\n    format = get_current_format( options );\n  }\n\n  // Special case when we have to take time zone into consideration\n  // when printing date (usually it is needed for those dates recorded\n  // automatically as UTC time stampts)\n  if ( options.tom_take_timezone_into_consideration ) {\n    return moment_tz.utc(date_str).tz( get_timezone( options ) ).format( format );\n  }\n\n  return moment.utc(date_str).format(format);\n}", "function_parameters": [{"type": "simple", "name": "date_str", "variadic": false}, {"type": "simple", "name": "format", "variadic": false}, {"type": "simple", "name": "options", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "as_date_formatted", "startLine": 9, "endLine": 25, "startIndex": 156, "endIndex": 664, "reach": "globalNoExport", "reachName": "as_date_formatted", "reachDetail": "rewire().__get__(as_date_formatted)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 3, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/view/helpers.js", "function_name": "get_property_from_options", "function_code": "function(options, property_name){\n  var value;\n\n  if ( options.hasOwnProperty('data')\n    && options.data.hasOwnProperty('root')\n    && options.data.root.hasOwnProperty(property_name)\n    && options.data.root[property_name]\n  ) {\n    value = options.data.root[property_name];\n  }\n\n  return value;\n}", "function_parameters": [{"type": "simple", "name": "options", "variadic": false}, {"type": "simple", "name": "property_name", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "get_property_from_options", "startLine": 29, "endLine": 41, "startIndex": 858, "endIndex": 1156, "reach": "globalNoExport", "reachName": "get_property_from_options", "reachDetail": "rewire().__get__(get_property_from_options)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/view/helpers.js", "function_name": "get_current_format", "function_code": "function(options){\n\n  var format = 'YYYY-MM-DD';\n\n  var user = get_property_from_options(options, 'logged_user')\n    || get_property_from_options(options, 'user');\n\n  if ( user && user.hasOwnProperty('company') ) {\n    format = user.company.get_default_date_format();\n  }\n\n  return format;\n}", "function_parameters": [{"type": "simple", "name": "options", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "get_current_format", "startLine": 43, "endLine": 55, "startIndex": 1184, "endIndex": 1475, "reach": "globalNoExport", "reachName": "get_current_format", "reachDetail": "rewire().__get__(get_current_format)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/view/helpers.js", "function_name": "get_timezone", "function_code": "function(options) {\n\n  let timezone = 'Europe/London';\n\n  var user = get_property_from_options(options, 'logged_user')\n    || get_property_from_options(options, 'user');\n\n  if ( user && user.hasOwnProperty('company') ) {\n    timezone = user.company.timezone;\n  }\n\n  return timezone;\n}", "function_parameters": [{"type": "simple", "name": "options", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "get_timezone", "startLine": 57, "endLine": 69, "startIndex": 1497, "endIndex": 1781, "reach": "globalNoExport", "reachName": "get_timezone", "reachDetail": "rewire().__get__(get_timezone)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/team_view.js", "function_name": "TeamView", "function_code": "function TeamView(args) {\n  var me = this;\n\n  this.user = args.user;\n  this.base_date = args.base_date || this.user.company.get_today();\n\n  // Optional parameters that override base date specify months range\n  // Team view is going to represent.\n  //\n  // The precision is up to month, that is any smaller part of dates\n  // (such as days, hours etc) are ignored.\n  //\n  // If those two parameters are missed - base_date is used to determine with month\n  // Team view would represent.\n  //\n  this.start_date = args.start_date;\n  this.end_date   = args.end_date;\n\n  if (args.start_date && args.end_date && args.base_date) {\n    Exception.throw_user_error({\n      user_error   : 'Failed to calculate team view',\n      system_error : 'TeamView could not be instanciated with start_date, end_data and base_date all defined.'\n    });\n  }\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "TeamView", "startLine": 11, "endLine": 35, "startIndex": 193, "endIndex": 1027, "reach": "direct", "reachDetail": "require()", "hasReturn": false, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/middleware/flash_messages.js", "function_name": "__direct_export__", "function_code": "function(req, res, next){\n    res.locals.flash = req.session.flash;\n    delete req.session.flash;\n\n    // This is is a function that return custom function to be installed\n    // into session object as a method to add new message or array of\n    // messages.\n    var install_flash_array = function(key) {\n\n        return function(error_message){\n            if ( ! this.flash ) {\n                this.flash = {};\n            }\n            if ( ! Array.isArray( this.flash[key] ) ) {\n                this.flash[key] = [];\n            }\n\n            if (Array.isArray(error_message)) {\n                this.flash[key] = this.flash[key].concat( error_message );\n            } else {\n                this.flash[key].push( error_message );\n            }\n        };\n    };\n\n    req.session.flash_error   = install_flash_array('errors');\n    req.session.flash_message = install_flash_array('messages');\n\n    req.session.flash_has_errors = function(){\n        return this.flash\n           && Array.isArray( this.flash.errors )\n           && this.flash.errors.length > 0;\n    };\n\n    req.session.keep_old = function(){\n        if (res.locals.flash) {\n            if (res.locals.flash.errors) this.flash_error( res.locals.flash.errors );\n            if (res.locals.flash.messages) this.flash_message( res.locals.flash.messages );\n        }\n    };\n\n    next();\n\n}", "function_parameters": [{"type": "simple", "name": "req", "variadic": false}, {"type": "simple", "name": "res", "variadic": false}, {"type": "simple", "name": "next", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "__direct_export__", "startLine": 26, "endLine": 69, "startIndex": 971, "endIndex": 2323, "reach": "direct", "reachDetail": "require()", "hasReturn": false, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 3, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/public/js/global.js", "function_name": "getUrlVars", "function_code": "function getUrlVars(url){\n  if ( ! url ) {\n    url = window.location.href;\n  }\n  var vars = {}, hash;\n  var hashes = url.slice( url.indexOf('?') + 1).split('&');\n  for (var i = 0; i < hashes.length; i++) {\n    hash = hashes[i].split('=');\n    vars[hash[0]] = hash[1];\n  }\n  return vars;\n}", "function_parameters": [{"type": "simple", "name": "url", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "getUrlVars", "startLine": 98, "endLine": 109, "startIndex": 2630, "endIndex": 2918, "reach": "globalNoExport", "reachName": "getUrlVars", "reachDetail": "rewire().__get__(getUrlVars)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/t/lib/login_with_user.js", "function_name": "__direct_export__", "function_code": "function(args){\n  return args.driver.call(function(){return login_with_user_func(args)});\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "__direct_export__", "startLine": 134, "endLine": 136, "startIndex": 3135, "endIndex": 3226, "reach": "direct", "reachDetail": "require()", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/middleware/ensure_user_is_admin.js", "function_name": "__direct_export__", "function_code": "function(req, res, next){\n\n    // User should be login to view settings pages\n    if ( !req.user ) {\n        return res.redirect_with_session(303, '/');\n    }\n\n    // Only Admin users allowed to deal with settings pages\n    if ( !req.user.is_admin() ) {\n        return res.redirect_with_session(303, '/');\n    }\n\n    next();\n}", "function_parameters": [{"type": "simple", "name": "req", "variadic": false}, {"type": "simple", "name": "res", "variadic": false}, {"type": "simple", "name": "next", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "__direct_export__", "startLine": 9, "endLine": 22, "startIndex": 172, "endIndex": 498, "reach": "direct", "reachDetail": "require()", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 3, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/leave/index.js", "function_name": "createNewLeave", "function_code": "function createNewLeave(args){\n\n  args = Joi.attempt(\n    args,\n    schemaCreateNewLeave,\n    \"Failed to validate arguments\"\n  );\n\n  const\n    employee          = args.for_employee,\n    leave_type        = args.of_type,\n    valide_attributes = args.with_parameters;\n\n  const\n    start_date = moment.utc(valide_attributes.from_date),\n    end_date   = moment.utc(valide_attributes.to_date);\n\n  // Check that start date is not bigger then end one\n  if ( start_date.toDate() > end_date.toDate() ) {\n    Exception.throwUserError({\n      user_error   : \"Start date is later than end date\",\n      system_error : `Failed to add new Leave for user ${ employee.id } `\n        `because start date ${  start_date } happnned to be after end date ${ end_date }`,\n    });\n  }\n\n  const comment = valide_attributes.reason,\n    companyId = employee.companyId;\n\n  // Make sure that booking to be created is not going to ovelap with\n  // any existing bookings\n  return Promise\n\n    .try(() => employee.validate_overlapping(valide_attributes))\n    .then(() => employee.promise_boss())\n    .then(main_supervisor => {\n\n      const new_leave_status = employee.is_auto_approve()\n        ? Models.Leave.status_approved()\n        : Models.Leave.status_new();\n\n      // Following statement creates in memory only leave object\n      // it is not in database until .save() method is called\n      return Promise.resolve(Models.Leave.build({\n        userId           : employee.id,\n        leaveTypeId      : leave_type.id,\n        status           : new_leave_status,\n        approverId       : main_supervisor.id,\n        employee_comment : valide_attributes.reason,\n\n        date_start     : start_date.format('YYYY-MM-DD'),\n        date_end       : end_date.format('YYYY-MM-DD'),\n        day_part_start : valide_attributes.from_date_part,\n        day_part_end   : valide_attributes.to_date_part,\n      }));\n    })\n\n    .then(leave_to_create => employee\n      .validate_leave_fits_into_remaining_allowance({\n        year       : start_date,\n        leave_type : leave_type,\n        leave      : leave_to_create,\n      })\n      .then(() => leave_to_create.save())\n    )\n    .then(leave => commentLeaveIfNeeded({leave,comment,companyId}).then(() => leave))\n    .then(leave => Promise.resolve(leave));\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "createNewLeave", "startLine": 23, "endLine": 90, "startIndex": 561, "endIndex": 2832, "reach": "member", "reachNames": ["createNewLeave"], "reachDetail": "require().createNewLeave", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/leave/index.js", "function_name": "commentLeaveIfNeeded", "function_code": "({leave,comment, companyId}) => {\n  return comment ? commentLeave({leave,comment,companyId}) : Promise.resolve();\n}", "function_parameters": [{"type": "object_pattern", "keys": ["leave", "comment", "companyId"], "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "commentLeaveIfNeeded", "startLine": 92, "endLine": 94, "startIndex": 2863, "endIndex": 2978, "reach": "globalNoExport", "reachName": "commentLeaveIfNeeded", "reachDetail": "rewire().__get__(commentLeaveIfNeeded)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": false, "paramCount": 1, "reason": "UnsupportedParameterNotSimple"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/db/department.js", "function_name": "__direct_export__", "function_code": "function(sequelize, DataTypes) {\n  let Department = sequelize.define(\"Department\", {\n    // TODO add validators!\n    name : {\n      type      : DataTypes.STRING,\n      allowNull : false\n    },\n    allowance : {\n      type         : DataTypes.INTEGER,\n      allowNull    : false,\n      defaultValue : 20,\n    },\n    include_public_holidays : {\n      type         : DataTypes.BOOLEAN,\n      allowNull    : false,\n      defaultValue : true,\n    },\n    is_accrued_allowance : {\n      type         : DataTypes.BOOLEAN,\n      allowNull    : false,\n      defaultValue : false,\n    },\n  }, {\n      indexes : [\n        {\n          fields : ['companyId'],\n        },\n        {\n          fields : ['id'],\n        }\n      ],\n      classMethods: {\n          loadScope : function( models ) {\n\n            Department.addScope(\n              'with_simple_users',\n              {\n                include : [\n                  { model : models.User, as : 'users' },\n                ],\n              }\n            );\n\n            Department.addScope(\n              'with_boss',\n              {\n                include : [\n                  { model : models.User, as : 'boss' },\n                ]\n              }\n            );\n\n            Department.addScope(\n              'with_supervisors',\n              {\n                include : [\n                  { model : models.User, as : 'supervisors' },\n                ]\n              }\n            );\n          },\n          associate : function( models ) {\n            // We have constrains OFF as to prevent ORM complaining about\n            // cycle reference\n            Department.belongsTo ( models.User,    { as : 'boss', constraints: false});\n            Department.belongsTo ( models.Company, { as : 'company'});\n            Department.hasMany   ( models.User,    { as : 'users'});\n\n            Department.hasMany( models.DepartmentSupervisor, {\n              as         : 'supervisors_link',\n              foreignKey : {name: 'department_id', allowNull: false},\n            });\n\n            Department.belongsToMany(models.User, {\n              as         : 'supervisors',\n              foreignKey : 'department_id',\n              otherKey   : 'user_id',\n              through    : models.DepartmentSupervisor,\n            });\n          },\n\n          default_order_field : function(){\n              return 'name';\n          },\n      },\n\n      instanceMethods : {\n\n        // Return users related to current department and still active\n        promise_active_users : function(){\n          return this.getUsers({\n            where : sequelize.models.User.get_active_user_filter()\n          });\n        },\n\n        promise_team_view_for_month : function( month ){\n          return this._promise_team_view({ start_date : month });\n        },\n\n        promise_team_view_for_months_range : function (start_month, end_month){\n          return this._promise_team_view({\n            start_date : start_month,\n            end_date   : end_month,\n          });\n        },\n\n        _promise_team_view : function(args){\n\n          let\n            self       = this,\n            model      = sequelize.models,\n            start_date = args.start_date,\n            end_date   = args.end_date;\n\n\n          var promise_users_and_leaves = Promise\n\n          // First of all ensure that \"start_date\" is defined\n          .try(function(){\n            if ( start_date ) {\n              return Promise.resolve(start_date);\n            }\n\n            return self.getCompany()\n              .then(company => Promise.resolve( start_date = company.get_today() ) )\n          })\n\n          // Ensure end_date is suitable if it was provided\n          .then(() => {\n\n            // If end_date was not provided: no need to validate it: set it to be equal to start date\n            if ( ! end_date ) {\n\n              end_date = start_date;\n\n              return Promise.resolve();\n            }\n\n            // If end date is privided...\n            // ... ensure start and end dates are from within same year\n            if (moment.utc(end_date).format('YYYY') !== moment.utc(start_date).format('YYYY')) {\n              Exception.throw_user_error({\n                user_error : 'Start and End dates should within single year',\n                system_error : '_promise_team_view was called with start_date and end_date from different years.',\n              });\n            }\n\n            // ... ensure that start date proceed end date\n            if (moment.utc(start_date).dayOfYear() > moment.utc(end_date).dayOfYear()) {\n              Exception.throw_user_error({\n                user_error : 'Start date needs to be before end date',\n                system_error : '_promise_team_view was called with end_date prior to start_date',\n              });\n            }\n\n            return Promise.resolve();\n          })\n\n          // Get users\n          .then( () => self.promise_active_users() )\n          .then(function(users){\n\n            return Promise.all(\n              _.map(\n                users,\n                function(user){\n                  return user.promise_my_leaves_for_calendar({\n                    year : start_date,\n                  })\n                  .then(function(leaves){\n\n                    var leave_days = _.flatten( _.map(leaves, function(leave){\n                      return _.map( leave.get_days(), function(leave_day){\n                        leave_day.leave = leave;\n                        return leave_day;\n                      });\n                    }));\n\n                    return user.promise_schedule_I_obey()\n                      .then(function(schedule){\n                        return Promise.resolve({\n                          user       : user,\n                          leave_days : leave_days,\n                          schedule   : schedule,\n                        });\n                      });\n                  });\n                }\n              ) // End of map\n            ); // End of promise_users_and_leaves\n          });\n\n          var promise_company = self.getCompany({\n            include:[\n              { model : model.BankHoliday , as : 'bank_holidays' },\n              { model : model.LeaveType   , as : 'leave_types' },\n            ]\n          });\n\n          return Promise.join(\n            promise_company,\n            promise_users_and_leaves,\n            function(company, users_and_leaves){\n\n              let number_of_months = moment.utc(end_date).month() - moment.utc(start_date).month();\n\n              users_and_leaves.forEach( user_data => {\n\n                user_data.days = [];\n\n                // Now iterate throw all monthes between start and end dates\n                // and get calendar months for each\n                // and then combined them all togather\n                for ( let i=0; i<=number_of_months; i++ ) {\n\n                  let calendar_month = new CalendarMonth(\n                    moment.utc(start_date).clone().add(i, 'months'),\n                    {\n                      bank_holidays :\n                        self.include_public_holidays\n                        ? company.bank_holidays\n                        : [],\n                      leave_days : user_data.leave_days,\n                      schedule   : user_data.schedule,\n                      today      : company.get_today(),\n                      leave_types: company.leave_types,\n                    }\n                  );\n\n                  user_data.days.push( calendar_month.as_for_team_view());\n                } // end of for\n                user_data.days = _.flatten( user_data.days );\n              });\n\n              return Promise.resolve(users_and_leaves);\n            }\n          );\n\n        }, // End of promise_team_view\n\n        // Return new department object that is based on same ID but include all supervisors\n        promise_me_with_supervisors : function() {\n          var self = this;\n\n          return self.Model.scope('with_supervisors').findById( self.id );\n        },\n      }\n  });\n\n  return Department;\n}", "function_parameters": [{"type": "simple", "name": "sequelize", "variadic": false}, {"type": "simple", "name": "DataTypes", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "__direct_export__", "startLine": 10, "endLine": 260, "startIndex": 224, "endIndex": 8240, "reach": "direct", "reachDetail": "require()", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20171219-allowance-adjustment-per-year.js", "function_name": "up", "function_code": "function (queryInterface, Sequelize) {\n\n    return queryInterface\n      .createTable(\n        models.UserAllowanceAdjustment.tableName,\n        models.UserAllowanceAdjustment.attributes\n      )\n      .then(() => queryInterface.describeTable('Users'))\n      .then(function(attributes){\n\n        if ( ! attributes.hasOwnProperty('adjustment')) {\n          return Promise.resolve();\n        }\n\n        let sql = 'INSERT INTO user_allowance_adjustment (year, adjustment, user_id, created_at) '\n          + 'SELECT 2017 AS year, adjustment as adjustment, id as user_id, date() || \\' \\' || time() as created_at '\n          + 'FROM users';\n\n        return queryInterface.sequelize.query( sql );\n      })\n\n      .then(() => Promise.resolve());\n\n  }", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "up", "startLine": 8, "endLine": 31, "startIndex": 116, "endIndex": 856, "reach": "member", "reachNames": ["up"], "reachDetail": "require().up", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20171219-allowance-adjustment-per-year.js", "function_name": "down", "function_code": "function (queryInterface, Sequelize) {\n    // No way back!\n    return Promise.resolve();\n  }", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "down", "startLine": 33, "endLine": 36, "startIndex": 867, "endIndex": 959, "reach": "member", "reachNames": ["down"], "reachDetail": "require().down", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20171228-add-time-zone-field-to-company.js", "function_name": "up", "function_code": "function (queryInterface, Sequelize) {\n\n    return queryInterface.describeTable('Companies')\n      .then(function(attributes){\n\n        if (attributes.hasOwnProperty('timezone')) {\n          return 1;\n        }\n\n        return queryInterface.addColumn(\n          'Companies',\n          'timezone',\n          models.Company.attributes.timezone\n        );\n      });\n  }", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "up", "startLine": 7, "endLine": 22, "startIndex": 83, "endIndex": 450, "reach": "member", "reachNames": ["up"], "reachDetail": "require().up", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20171228-add-time-zone-field-to-company.js", "function_name": "down", "function_code": "function (queryInterface, Sequelize) {\n    return queryInterface\n      .removeColumn('Companies', 'timezone');\n  }", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "down", "startLine": 24, "endLine": 27, "startIndex": 461, "endIndex": 575, "reach": "member", "reachNames": ["down"], "reachDetail": "require().down", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20190629-add-is_team_view_hidden_field.js", "function_name": "up", "function_code": "(queryInterface, Sequelize) => {\n\n    queryInterface.describeTable('Companies').then(attributes => {\n\n      if (attributes.hasOwnProperty('is_team_view_hidden')) {\n        return 1;\n      }\n\n      return queryInterface.addColumn(\n        'Companies',\n        'is_team_view_hidden',\n        models.Company.attributes.is_team_view_hidden\n      );\n    });\n  }", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "up", "startLine": 7, "endLine": 21, "startIndex": 83, "endIndex": 439, "reach": "member", "reachNames": ["up"], "reachDetail": "require().up", "hasReturn": false, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20190629-add-is_team_view_hidden_field.js", "function_name": "down", "function_code": "(queryInterface, Sequelize) => queryInterface\n    .removeColumn('Companies', 'is_team_view_hidden')", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "down", "startLine": 23, "endLine": 24, "startIndex": 450, "endIndex": 549, "reach": "member", "reachNames": ["down"], "reachDetail": "require().down", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/t/lib/check_booking_on_calendar.js", "function_name": "__direct_export__", "function_code": "function(args){\n  return args.driver.call(function(){return check_booking_func(args)});\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "__direct_export__", "startLine": 62, "endLine": 64, "startIndex": 1737, "endIndex": 1826, "reach": "direct", "reachDetail": "require()", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/t/lib/set_user_to_start_at_the_beginning_of_the_year.js", "function_name": "getUserId", "function_code": "({userId,email,driver}) => (!!userId)\n  ? bluebird.resolve(userId)\n  : userInfoFunc({email,driver})\n    .then(({user : {id}}) => bluebird.resolve(id))", "function_parameters": [{"type": "object_pattern", "keys": ["userId", "email", "driver"], "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "getUserId", "startLine": 12, "endLine": 15, "startIndex": 296, "endIndex": 446, "reach": "globalNoExport", "reachName": "getUserId", "reachDetail": "rewire().__get__(getUserId)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": false, "paramCount": 1, "reason": "UnsupportedParameterNotSimple"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/email.js", "function_name": "_promise_to_unfold_context", "function_code": "function _promise_to_unfold_context(context) {\n  if (context.hasOwnProperty('user')){\n    return context.user.reload_with_session_details();\n  } else {\n    return bluebird.resolve(1);\n  }\n}", "function_parameters": [{"type": "simple", "name": "context", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "_promise_to_unfold_context", "startLine": 23, "endLine": 29, "startIndex": 574, "endIndex": 763, "reach": "globalNoExport", "reachName": "_promise_to_unfold_context", "reachDetail": "rewire().__get__(_promise_to_unfold_context)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/leave_request_parameters.js", "function_name": "LeaveRequest", "function_code": "function LeaveRequest(args) {\n    var me = this;\n\n    // Make sure all required data is provided\n    _.each(\n        [\n          'leave_type','from_date','from_date_part',\n          'to_date', 'to_date_part', 'reason'\n        ],\n        function(property){\n            if (! _.has(args, property)) {\n                throw new Error('No mandatory '+property+' was provided to LeaveRequest constructor');\n            }\n        }\n    );\n\n    // From date should not be bigger then to\n    if (moment.utc(args.from_date).toDate() > moment.utc(args.to_date).toDate()){\n        throw new Error( 'From date should be before To date at LeaveRequest constructor' );\n    }\n\n    _.each(\n        [\n          'leave_type','from_date','from_date_part',\n          'to_date', 'to_date_part', 'reason', 'user'\n        ],\n        function(property){ me[property] = args[property]; }\n    );\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "LeaveRequest", "startLine": 9, "endLine": 37, "startIndex": 126, "endIndex": 998, "reach": "direct", "reachDetail": "require()", "hasReturn": false, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/route/bankHolidays.js", "function_name": "getCurrentYear", "function_code": "({req}) => {\n  const rawYear = req.query['year'] || req.body['year'];\n  return (\n    validator.isNumeric(rawYear)\n    ? moment.utc(rawYear, 'YYYY')\n    : req.user.company.get_today()\n  ).year();\n}", "function_parameters": [{"type": "object_pattern", "keys": ["req"], "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "getCurrentYear", "startLine": 15, "endLine": 22, "startIndex": 438, "endIndex": 634, "reach": "globalNoExport", "reachName": "getCurrentYear", "reachDetail": "rewire().__get__(getCurrentYear)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": false, "paramCount": 1, "reason": "UnsupportedParameterNotSimple"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/route/bankHolidays.js", "function_name": "promiseNewBankHoliday", "function_code": "({model, req, companyId}) => {\n\n  if (!validator.trim(req.body['name__new'])) {\n    return Promise.resolve(1);\n  }\n\n  const attributes = getAndValidateBankHoliday({\n    req,\n    id: 'new',\n    itemName : 'New Bank Holiday',\n  });\n\n  if ( req.session.flash_has_errors() ) {\n    return Promise.resolve(1);\n  }\n\n  return model.BankHoliday.create({...attributes, companyId});\n}", "function_parameters": [{"type": "object_pattern", "keys": ["model", "req", "companyId"], "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "promiseNewBankHoliday", "startLine": 63, "endLine": 80, "startIndex": 1708, "endIndex": 2081, "reach": "globalNoExport", "reachName": "promiseNewBankHoliday", "reachDetail": "rewire().__get__(promiseNewBankHoliday)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": false, "paramCount": 1, "reason": "UnsupportedParameterNotSimple"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/route/bankHolidays.js", "function_name": "getAndValidateBankHoliday", "function_code": "({req, id, itemName}) => {\n\n  // Get user parameters\n  let name = validator.trim(req.body[`name__${id}`]),\n      date = validator.trim(req.body[`date__${id}`]);\n\n  // Nothing to validate, abort\n  if (!name && !date) {\n    return {};\n  }\n\n  // Validate provided parameters\n  //\n  // Note, we allow users to put whatever they want into the name.\n  // The XSS defence is in the templates\n\n  date = req.user.company.normalise_date( date );\n\n  if (!validator.isDate(date) ) {\n    req.session.flash_error(`New day for ${itemName} should be date`);\n  }\n\n  return { name, date };\n}", "function_parameters": [{"type": "object_pattern", "keys": ["req", "id", "itemName"], "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "getAndValidateBankHoliday", "startLine": 226, "endLine": 249, "startIndex": 7005, "endIndex": 7578, "reach": "globalNoExport", "reachName": "getAndValidateBankHoliday", "reachDetail": "rewire().__get__(getAndValidateBankHoliday)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": false, "paramCount": 1, "reason": "UnsupportedParameterNotSimple"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/db/leave.js", "function_name": "__direct_export__", "function_code": "function(sequelize, DataTypes) {\n    var Leave = sequelize.define(\"Leave\", {\n        // TODO add validators!\n        'status' : {\n            type      : DataTypes.INTEGER,\n            allowNull : false\n        },\n        employee_comment : {\n            type      : DataTypes.STRING,\n            allowNull : true,\n        },\n        approver_comment : {\n            type      : DataTypes.STRING,\n            allowNull : true,\n        },\n        decided_at : {\n            type      : DataTypes.DATE,\n            allowNull : true,\n        },\n\n        date_start : {\n            type         : DataTypes.DATE,\n            allowNull    : false,\n            defaultValue : sequelize.NOW,\n        },\n        day_part_start : {\n            type         : DataTypes.INTEGER,\n            allowNull    : false,\n            defaultValue : 1, // VPP TODO replace with constant value\n        },\n        date_end : {\n            type         : DataTypes.DATE,\n            allowNull    : false,\n            defaultValue : sequelize.NOW,\n        },\n        day_part_end : {\n            type         : DataTypes.INTEGER,\n            allowNull    : false,\n            defaultValue : 1, // VPP TODO replace with constant value\n        },\n    }, {\n\n      indexes : [\n        {\n          fields : ['userId'],\n        },\n        {\n          fields : ['leaveTypeId'],\n        },\n        {\n          fields : ['approverId'],\n        },\n      ],\n      classMethods : {\n        associate : function( models ){\n          Leave.belongsTo(models.User, { as : 'user',foreignKey     : 'userId' });\n          Leave.belongsTo(models.User, { as : 'approver',foreignKey : 'approverId' });\n          Leave.belongsTo(models.LeaveType, { as : 'leave_type' } );\n          Leave.hasMany(models.Comment, {\n            as : 'comments',\n            foreignKey: 'companyId',\n            scope: {\n              entityType: models.Comment.getEntityTypeLeave(),\n            },\n          });\n        },\n\n        status_new           : () => 1,\n        status_approved      : () => 2,\n        status_rejected      : () => 3,\n        status_pended_revoke : () => 4,\n        status_canceled      : () => 5,\n\n        leave_day_part_all       : () => 1,\n        leave_day_part_morning   : () => 2,\n        leave_day_part_afternoon : () => 3,\n      },\n\n      instanceMethods : {\n\nreloadWithAssociates : function() {\n  const self = this;\n\n  return self.reload({\n    include : [\n      {model : self.sequelize.models.User,      as : 'user'},\n      {model : self.sequelize.models.User,      as : 'approver'},\n      {model : self.sequelize.models.LeaveType, as : 'leave_type'},\n    ],\n  });\n},\n\nget_days : function() {\n\n  var self   = this,\n  start_date = moment.utc(this.date_start),\n  end_date   = moment.utc(this.date_end),\n  days       = [ start_date ];\n\n  if (self.hasOwnProperty('_days')) {\n    return self._days;\n  }\n\n  if ( ! start_date.isSame( end_date, 'day') ){\n\n      var days_in_between = end_date.diff( start_date, 'days' ) - 1;\n\n      for (var i=1; i<=days_in_between; i++) {\n          days.push( start_date.clone().add(i, 'days') );\n      }\n\n      days.push( end_date );\n  }\n\n  days = _.map(\n      days,\n      function(day){\n          return new LeaveDay({\n            leave_type_id : self.leaveTypeId,\n            sequelize : sequelize,\n            date     : day.format('YYYY-MM-DD'),\n            day_part : day.isSame(start_date, 'day')\n              ? self.day_part_start\n              : day.isSame(end_date, 'day')\n              ? self.day_part_end\n              : Leave.leave_day_part_all(),\n          });\n      }\n  );\n\n  return self._days = days;\n},\n\nfit_with_leave_request : function(leave_request) {\n\n    // If start and end dates are the same, check if one of them fit\n    // into fist or last leave_days.\n    if (\n        leave_request.is_within_one_day() && (\n            leave_request.does_fit_with_leave_day( _.last(this.get_days()) )\n            ||\n            leave_request.does_fit_with_leave_day( _.first(this.get_days()) )\n        )\n      ) {\n        return true;\n    }\n\n    // If start and end dates are different, check if start date\n    // fits into end leave_day or end date fits int start leave_date.\n    if (\n        (! leave_request.is_within_one_day()) && (\n            leave_request.does_fit_with_leave_day_at_start(\n                 _.last(this.get_days())\n            )\n            ||\n            leave_request.does_fit_with_leave_day_at_end(\n                 _.first(this.get_days())\n            )\n        )\n    ) {\n        return true;\n    }\n\n    return false;\n}, // End of fit_with_leave_request\n\nis_new_leave : function() {\n    return this.status === Leave.status_new();\n},\n\nis_pended_revoke_leave : function(){\n  return this.status === Leave.status_pended_revoke();\n},\n\n// Leave is treated as \"approved\" one if it is in approved staus\n// or if it is waiting decision on revoke action\n//\nis_approved_leave : function() {\n  return this.status === Leave.status_approved() ||\n    this.status === Leave.status_pended_revoke() ;\n},\n\n// Determine if leave starts with half day in the morning\n//\ndoes_start_half_morning : function() {\n  return this.day_part_start === Leave.leave_day_part_morning();\n},\n\ndoes_start_half_afternoon : function() {\n  return this.day_part_start === Leave.leave_day_part_afternoon();\n},\n\n// Determine if leave ends with half a day in the afternoon\n//\ndoes_end_half_afternoon : function() {\n  return this.day_part_end === Leave.leave_day_part_afternoon();\n},\n\ndoes_end_half_morning : function() {\n  return this.day_part_end === Leave.leave_day_part_morning();\n},\n\nget_start_leave_day : function(){\n    return this.get_days()[0];\n},\n\nget_end_leave_day : function(){\n    return this.get_days()[ this.get_days().length - 1 ];\n},\n\nget_deducted_days_number : function(args) {\n  var number_of_days = this.get_deducted_days(args).length;\n\n  // leave spans via on working day only, pay attention only to the start date\n  if (number_of_days === 1 && !this.get_start_leave_day().is_all_day_leave()) {\n    number_of_days = number_of_days - 0.5;\n  }\n\n  // case when leave spreads for more then one day, then check if both start and day\n  // are halfs\n  else if (number_of_days > 1) {\n    if ( ! this.get_start_leave_day().is_all_day_leave() ){\n      number_of_days = number_of_days - 0.5;\n    }\n    if ( ! this.get_end_leave_day().is_all_day_leave() ) {\n      number_of_days = number_of_days - 0.5;\n    }\n  }\n\n  return number_of_days;\n},\n\nget_deducted_days : function(args) {\n\n  var leave_days = [],\n    ignore_allowance = false,\n    leave_type = this.leave_type || args.leave_type,\n    year;\n\n  if (args && args.hasOwnProperty('ignore_allowance')) {\n    ignore_allowance = args.ignore_allowance;\n  }\n\n  if (args && args.hasOwnProperty('year')) {\n    year = moment.utc(args.year, 'YYYY');\n  }\n\n  // If current Leave stands for type that does not use\n  // allowance, ignore rest of the code;\n  if (! ignore_allowance && !leave_type.use_allowance) return leave_days;\n\n  var user = this.user || this.approver || args.user;\n\n  var bank_holiday_map = {};\n\n  user.company.bank_holidays.forEach(function(bank_holiday){\n    bank_holiday_map[ bank_holiday.get_pretty_date() ] = 1;\n  });\n\n  // Because we currently in synchronos code we have to rely on cahed value\n  // rather then fetching it here, and prey that whoever called current\n  // method made sure that the cach is populated\n  var schedule = user.cached_schedule;\n\n  leave_days = _.filter(\n    _.map(this.get_days(), function(leave_day){\n\n      // Ignore bank holidays\n      if ( bank_holiday_map[ leave_day.get_pretty_date() ] ) return;\n\n      // If it happenned that current leave day is from the year current\n      // call was made of, ignore that day\n      if (year && year.year() !== moment.utc(leave_day.date).year()) return;\n\n      // Ignore non-working days (weekends)\n      if ( ! schedule.is_it_working_day({ day : moment.utc(leave_day.date) }) ){\n        return;\n      }\n\n      return leave_day;\n    }),\n    function(leave_day){\n      return !! leave_day;\n    }\n  ) || [];\n\n  return leave_days;\n}, // End get_deducted_days\n\npromise_to_reject : function(args) {\n  let self = this;\n\n  if ( ! args ) {\n    args = {};\n  }\n\n  if ( ! args.by_user ) {\n    throw new Error('promise_to_reject has to have by_user parameter');\n  }\n\n  let by_user = args.by_user;\n\n  // See explanation to promise_to_approve\n  self.status = self.is_pended_revoke_leave() ?\n    Leave.status_approved():\n    Leave.status_rejected();\n\n  self.approverId = by_user.id;\n\n  return self.save();\n},\n\npromise_to_approve : function(args) {\n  let self = this;\n\n  if ( ! args ) {\n    args = {};\n  }\n\n  if ( ! args.by_user ) {\n    throw new Error('promise_to_approve has to have by_user parameter');\n  }\n\n  let by_user = args.by_user;\n\n  // If current leave is one with requested revoke, then\n  // approve action set it into Rejected status\n  // otherwise it is approve action for new leave\n  // so put leave into Approved\n  self.status = self.is_pended_revoke_leave() ?\n    Leave.status_rejected():\n    Leave.status_approved();\n\n  self.approverId = by_user.id;\n\n  return self.save();\n},\n\npromise_to_revoke : function(){\n  let self = this;\n\n  return self.getUser({\n      include : [\n        {\n          model : sequelize.models.Department,\n          as    : 'department',\n        }\n      ],\n    })\n    .then(function(user){\n\n      var new_leave_status = user.is_auto_approve()\n        ? Leave.status_rejected()\n        : Leave.status_pended_revoke();\n\n      // By default it is user main boss is one who has to approve the revoked request\n      self.approverId = user.department.bossId;\n\n      self.status = new_leave_status;\n\n      return self.save();\n    });\n},\n\npromise_to_cancel : function(){\n  var self = this;\n\n  if ( ! self.is_new_leave() ) {\n    throw new Error('An attempt to cancel non-new leave request id : '+self.id);\n  }\n\n  self.status = Leave.status_canceled();\n\n  return self.save();\n},\n\nget_leave_type_name : function() {\n  var leave_type = this.get('leave_type');\n\n  if (! leave_type ) {\n    return '';\n  } else {\n    return leave_type.name;\n  }\n},\n\npromise_approver : function() {\n\n  return this.getApprover({\n    include : [{\n      model : sequelize.models.Company,\n      as : 'company',\n      include : [{\n        model : sequelize.models.BankHoliday,\n        as : 'bank_holidays',\n      }],\n    }],\n  })\n},\n\n\n        },\n    });\n\n    return Leave;\n}", "function_parameters": [{"type": "simple", "name": "sequelize", "variadic": false}, {"type": "simple", "name": "DataTypes", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "__direct_export__", "startLine": 10, "endLine": 415, "startIndex": 183, "endIndex": 10573, "reach": "direct", "reachDetail": "require()", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20181119-integration-api-token-per-company.js", "function_name": "up", "function_code": "(queryInterface, Sequelize) => {\n\n    queryInterface.describeTable('Companies').then(attributes => {\n\n      if (attributes.hasOwnProperty('integration_api_token')) {\n        return 1;\n      }\n\n      return queryInterface.addColumn(\n        'Companies',\n        'integration_api_token',\n        models.Company.attributes.integration_api_token\n      );\n    });\n\n    queryInterface.describeTable('Companies').then(attributes => {\n\n      if (attributes.hasOwnProperty('integration_api_enabled')) {\n        return 1;\n      }\n\n      return queryInterface.addColumn(\n        'Companies',\n        'integration_api_enabled',\n        models.Company.attributes.integration_api_enabled\n      );\n    });\n\n  }", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "up", "startLine": 7, "endLine": 35, "startIndex": 83, "endIndex": 778, "reach": "member", "reachNames": ["up"], "reachDetail": "require().up", "hasReturn": false, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20181119-integration-api-token-per-company.js", "function_name": "down", "function_code": "(queryInterface, Sequelize) => queryInterface\n    .removeColumn('Companies', 'integration_api_token')\n    .then(() => queryInterface.removeColumn('Companies', 'integration_api_enabled'))", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "down", "startLine": 37, "endLine": 39, "startIndex": 789, "endIndex": 975, "reach": "member", "reachNames": ["down"], "reachDetail": "require().down", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/route/requests.js", "function_name": "leave_request_action", "function_code": "function leave_request_action(args) {\n    var\n      current_action      = args.action,\n      leave_action_method = args.leave_action_method,\n      was_pended_revoke   = false;\n\n    return function(req, res){\n\n    var request_id = validator.trim( req.body['request'] );\n\n    if (!validator.isNumeric(request_id)){\n      req.session.flash_error('Failed to ' + current_action);\n    }\n\n    if ( req.session.flash_has_errors() ) {\n      console.error('Got validation errors on '+current_action+' request handler');\n\n      return res.redirect_with_session('../');\n    }\n\n    Promise.try(function(){\n      return req.user.promise_leaves_to_be_processed();\n    })\n    .then(function(leaves){\n       var leave_to_process = _.find(leaves, function(leave){\n          return String(leave.id) === String(request_id)\n            && (leave.is_new_leave() || leave.is_pended_revoke_leave());\n       });\n\n       if (! leave_to_process) {\n         throw new Error('Provided ID '+request_id\n           +'does not correspond to any leave requests to be '+current_action\n           +'ed for user ' + req.user.id\n          );\n       }\n\n       was_pended_revoke = leave_to_process.is_pended_revoke_leave();\n\n       return leave_to_process[leave_action_method]({ by_user : req.user });\n    })\n    .then(function(processed_leave){\n      return processed_leave.reload({\n        include : [\n          {model : req.app.get('db_model').User, as : 'user'},\n          {model : req.app.get('db_model').User, as : 'approver'},\n          {model : req.app.get('db_model').LeaveType, as : 'leave_type' },\n        ],\n      });\n    })\n    .then(function(processed_leave){\n\n      var Email = new EmailTransport();\n\n      return Email.promise_leave_request_decision_emails({\n        leave             : processed_leave,\n        action            : current_action,\n        was_pended_revoke : was_pended_revoke,\n      })\n      .then(function(){\n        return Promise.resolve( processed_leave);\n      });\n    })\n    .then(function(processed_leave){\n      req.session.flash_message('Request from '+processed_leave.user.full_name()\n          +' was processed');\n\n      return res.redirect_with_session('../');\n    })\n    .catch(function(error){\n      console.error('An error occurred when attempting to '+current_action\n        +' leave request '+request_id+' by user '+req.user.id+' Error: '+error\n      );\n      req.session.flash_error('Failed to '+current_action);\n      return res.redirect_with_session('../');\n    });\n  };\n\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "leave_request_action", "startLine": 29, "endLine": 106, "startIndex": 817, "endIndex": 3304, "reach": "globalNoExport", "reachName": "leave_request_action", "reachDetail": "rewire().__get__(leave_request_action)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20180102-company-mode.js", "function_name": "up", "function_code": "function (queryInterface, Sequelize) {\n\n    queryInterface.describeTable('Companies').then(function(attributes){\n\n      if (attributes.hasOwnProperty('mode')) {\n        return 1;\n      }\n\n      return queryInterface.addColumn(\n        'Companies',\n        'mode',\n        models.Company.attributes.mode\n      );\n    });\n\n  }", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "up", "startLine": 7, "endLine": 22, "startIndex": 83, "endIndex": 407, "reach": "member", "reachNames": ["up"], "reachDetail": "require().up", "hasReturn": false, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20180102-company-mode.js", "function_name": "down", "function_code": "function (queryInterface, Sequelize) {\n    return queryInterface.removeColumn('Companies', 'mode');\n  }", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "down", "startLine": 24, "endLine": 26, "startIndex": 418, "endIndex": 521, "reach": "member", "reachNames": ["down"], "reachDetail": "require().down", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/calculateCarryOverAllowance.js", "function_name": "calculateCarryOverAllowance", "function_code": "({users}) => {\n\n  const\n    yearFrom = moment.utc().add(-1, 'y').year(),\n    yearTo = moment.utc().year();\n\n  let flow = Promise.resolve(users);\n\n  flow = flow.then(users => Promise.map(\n    users,\n    user => {\n      let carryOver;\n      return Promise.resolve(user.getCompany().then(c => carryOver = c.carry_over))\n        .then(() => user.reload_with_leave_details({year:moment.utc(yearFrom, 'YYYY')}))\n        .then(user => user.promise_allowance({\n          year: moment.utc(yearFrom, 'YYYY'),\n          now: moment.utc(yearFrom, 'YYYY').endOf('year'),\n          forceNow: true,\n        }))\n        .then(allowance => {\n\n          const carried_over_allowance = (carryOver === 0)\n            ? 0\n            : Math.min(allowance.number_of_days_available_in_allowance, carryOver);\n\n          return user.promise_to_update_carried_over_allowance({\n            carried_over_allowance,\n            year: yearTo,\n          });\n        })\n        .then(() => console.log(`Carried over unused allowance ${yearFrom} -> ${yearTo} for user ${user.id}`));\n    },\n    {concurrency : 1}\n  ));\n\n  return flow;\n}", "function_parameters": [{"type": "object_pattern", "keys": ["users"], "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "calculateCarryOverAllowance", "startLine": 8, "endLine": 44, "startIndex": 121, "endIndex": 1223, "reach": "member", "reachNames": ["calculateCarryOverAllowance"], "reachDetail": "require().calculateCarryOverAllowance", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": false, "paramCount": 1, "reason": "UnsupportedParameterNotSimple"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/route/reports.js", "function_name": "render_allowancebytime", "function_code": "function render_allowancebytime(args) {\n  let\n    req               = args.req,\n    res               = args.res,\n    team_view_details = args.team_view_details,\n    company           = args.company,\n    start_date        = args.start_date,\n    end_date          = args.end_date;\n\n    return Promise\n      .try(() => req.query['as-csv']\n        ? render_allowancebytime_as_csv(args)\n        : res.render('report/allowancebytime', {\n          users_and_leaves    : team_view_details.users_and_leaves,\n          related_departments : team_view_details.related_departments,\n          current_department  : team_view_details.current_department,\n          company             : company,\n          start_date_str      : start_date.format('YYYY-MM'),\n          end_date_str        : end_date.format('YYYY-MM'),\n          start_date_obj      : start_date,\n          end_date_obj        : end_date,\n          same_month          : (start_date.format('YYYYMM') === end_date.format('YYYYMM')),\n        })\n      );\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "render_allowancebytime", "startLine": 87, "endLine": 111, "startIndex": 2474, "endIndex": 3478, "reach": "globalNoExport", "reachName": "render_allowancebytime", "reachDetail": "rewire().__get__(render_allowancebytime)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/route/reports.js", "function_name": "render_allowancebytime_as_csv", "function_code": "function render_allowancebytime_as_csv(args) {\n  let\n    res               = args.res,\n    team_view_details = args.team_view_details,\n    company           = args.company,\n    start_date        = args.start_date,\n    end_date          = args.end_date;\n\n  // Compose file name\n  res.attachment(\n    company.name_for_machine()\n      + '_employee_allowances_between'\n      + start_date.format('YYYY_MM')\n      + '_and_'\n      + end_date.format('YYYY_MM')\n      + '.csv'\n  );\n\n  // Compose result CSV header\n  let content = [\n    ['email', 'last name', 'name']\n    // Add dynamic list of Leave Types\n    .concat(\n      team_view_details.users_and_leaves.length > 0\n        ? team_view_details.users_and_leaves[0].statistics.leave_type_break_down.pretty_version.map(it => it.name)\n        : []\n    )\n    .concat(['days deducted from allowance'])\n  ];\n\n  // ... and body\n  team_view_details.users_and_leaves.forEach(ul => {\n    content.push(\n      [\n        ul.user.email,\n        ul.user.lastname,\n        ul.user.name,\n      ]\n      // Dynamic part of the column list\n      .concat( ul.statistics.leave_type_break_down.pretty_version.map(it => it.stat))\n      .concat([ul.statistics.deducted_days])\n    );\n  });\n\n  return csv.stringifyAsync( content )\n    .then(csv_data_string => res.send(csv_data_string));\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "render_allowancebytime_as_csv", "startLine": 113, "endLine": 159, "startIndex": 3480, "endIndex": 4787, "reach": "globalNoExport", "reachName": "render_allowancebytime_as_csv", "reachDetail": "rewire().__get__(render_allowancebytime_as_csv)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/db/user_allowance_adjustment.js", "function_name": "__direct_export__", "function_code": "function(sequelize, DataTypes){\n  let UserAllowanceAdjustment = sequelize.define(\"UserAllowanceAdjustment\", {\n    year : {\n      type         : DataTypes.INTEGER,\n      allowNull    : false,\n      defaultValue : moment.utc().format('YYYY'),\n      comment      : 'Year when adjustment is applied',\n    },\n    adjustment : {\n      type         : DataTypes.INTEGER,\n      allowNull    : false,\n      defaultValue : 0,\n      comment      : 'Adjustment to allowance in current year',\n    },\n    carried_over_allowance : {\n      type         : DataTypes.INTEGER,\n      allowNull    : false,\n      defaultValue : 0,\n      comment      : 'Additional allowance to use based on un-used holidays in previous year',\n    },\n  }, {\n    underscored     : true,\n    freezeTableName : true,\n    timestamps      : true,\n    createdAt       : 'created_at',\n    updatedAt       : false,\n    tableName       : 'user_allowance_adjustment',\n    indexes : [{\n      fields : [ 'user_id', 'year' ],\n      unique : true,\n    }],\n\n    classMethods : {\n      associate : function(models) {\n        UserAllowanceAdjustment.belongsTo(models.User, {\n          as         : 'user',\n          foreignKey : 'user_id',\n        });\n      },\n    },\n\n  });\n\n  return UserAllowanceAdjustment;\n}", "function_parameters": [{"type": "simple", "name": "sequelize", "variadic": false}, {"type": "simple", "name": "DataTypes", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "__direct_export__", "startLine": 6, "endLine": 50, "startIndex": 68, "endIndex": 1322, "reach": "direct", "reachDetail": "require()", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/db/comment.js", "function_name": "__direct_export__", "function_code": "(sequelize, DataTypes) => {\n  const Comment = sequelize.define('Comment', {\n    entityType: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      comment: 'Type of entity current comments belongs to',\n    },\n    entityId: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      comment: 'Reference ID for entity current comment belongs to',\n    },\n    comment: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      comment: 'The value of comment',\n    },\n  },{\n    underscored     : true,\n    freezeTableName : true,\n    timestamps      : true,\n    createdAt       : 'at',\n    updatedAt       : false,\n    tableName       : 'comment',\n\n    classMethods : {\n      associate : (models) => {\n        Comment.belongsTo(models.Company, {\n          as         : 'company',\n          foreignKey : 'companyId',\n        });\n\n        Comment.belongsTo(models.User, {\n          as: 'byUser',\n          foreignKey: 'byUserId',\n        });\n      },\n      getEntityTypeLeave: () => 'LEAVE',\n    },\n  });\n\n  return Comment;\n}", "function_parameters": [{"type": "simple", "name": "sequelize", "variadic": false}, {"type": "simple", "name": "DataTypes", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "__direct_export__", "startLine": 4, "endLine": 46, "startIndex": 33, "endIndex": 1066, "reach": "direct", "reachDetail": "require()", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20171218-company-wide-message.js", "function_name": "up", "function_code": "function (queryInterface, Sequelize) {\n\n    queryInterface.describeTable('Companies').then(function(attributes){\n\n      if (attributes.hasOwnProperty('company_wide_message')) {\n        return 1;\n      }\n\n      return queryInterface.addColumn(\n        'Companies',\n        'company_wide_message',\n        models.Company.attributes.company_wide_message\n      );\n    });\n\n  }", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "up", "startLine": 7, "endLine": 22, "startIndex": 83, "endIndex": 455, "reach": "member", "reachNames": ["up"], "reachDetail": "require().up", "hasReturn": false, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20171218-company-wide-message.js", "function_name": "down", "function_code": "function (queryInterface, Sequelize) {\n    return queryInterface.removeColumn('Companies', 'company_wide_message');\n  }", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "down", "startLine": 24, "endLine": 26, "startIndex": 466, "endIndex": 585, "reach": "member", "reachNames": ["down"], "reachDetail": "require().down", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20170103144054-add_default_date_format.js", "function_name": "up", "function_code": "function (queryInterface, Sequelize) {\n\n    queryInterface.describeTable('Companies').then(function(attributes){\n\n      if (attributes.hasOwnProperty('date_format')) {\n        return 1;\n      }\n\n      return queryInterface.addColumn(\n        'Companies',\n        'date_format',\n        {\n          type         : Sequelize.STRING,\n          allowNull    : false,\n          defaultValue : 'YYYY-MM-DD',\n        }\n      );\n    });\n  }", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "up", "startLine": 4, "endLine": 22, "startIndex": 40, "endIndex": 472, "reach": "member", "reachNames": ["up"], "reachDetail": "require().up", "hasReturn": false, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20170103144054-add_default_date_format.js", "function_name": "down", "function_code": "function (queryInterface, Sequelize) {\n    return queryInterface.removeColumn('Companies', 'date_format');\n  }", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "down", "startLine": 24, "endLine": 26, "startIndex": 483, "endIndex": 593, "reach": "member", "reachNames": ["down"], "reachDetail": "require().down", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/t/lib/submit_form.js", "function_name": "__direct_export__", "function_code": "function(args){\n  return args.driver.call(function(){return submit_form_func(args)});\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "__direct_export__", "startLine": 164, "endLine": 166, "startIndex": 5428, "endIndex": 5515, "reach": "direct", "reachDetail": "require()", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/route/calendar.js", "function_name": "promise_feed_of_type", "function_code": "function promise_feed_of_type(args) {\n  var type = args.type,\n      user = args.user,\n      feeds= args.feeds,\n      feed = _.findWhere(feeds, { type : type }),\n      feed_promise;\n\n  if (! feed) {\n    feed_promise = user.sequelize.models.UserFeed.promise_new_feed({\n      user : user,\n      type : type,\n    });\n  } else {\n    feed_promise = Promise.resolve( feed );\n  }\n\n  return feed_promise;\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "promise_feed_of_type", "startLine": 229, "endLine": 246, "startIndex": 7524, "endIndex": 7921, "reach": "globalNoExport", "reachName": "promise_feed_of_type", "reachDetail": "rewire().__get__(promise_feed_of_type)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/t/integration/menu_bar_reflect_user.js", "function_name": "check_presense_promises", "function_code": "function check_presense_promises(args){\n\n  var selectors = args.selectors,\n      driver    = args.driver,\n      presense  = args.presense || false;\n\n  var promises_to_check = _.map(\n   selectors,\n    function( selector ){\n      return driver\n        .isElementPresent(By.css(selector))\n        .then(function(is_present){\n          expect(is_present).to.be.equal(presense);\n          return bluebird.resolve();\n        })\n    }\n  );\n\n  return promises_to_check;\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "check_presense_promises", "startLine": 135, "endLine": 154, "startIndex": 3637, "endIndex": 4100, "reach": "globalNoExport", "reachName": "check_presense_promises", "reachDetail": "rewire().__get__(check_presense_promises)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20180427-add-is_accrued_allowance-to-department.js", "function_name": "up", "function_code": "function (queryInterface, Sequelize) {\n\n    return queryInterface.describeTable('Departments')\n      .then(function(attributes){\n\n        if (attributes.hasOwnProperty('is_accrued_allowance')) {\n          return 1;\n        }\n\n        return queryInterface.addColumn(\n          'Departments',\n          'is_accrued_allowance',\n          models.Department.attributes.is_accrued_allowance\n        );\n      });\n  }", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "up", "startLine": 7, "endLine": 22, "startIndex": 83, "endIndex": 493, "reach": "member", "reachNames": ["up"], "reachDetail": "require().up", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20180427-add-is_accrued_allowance-to-department.js", "function_name": "down", "function_code": "function (queryInterface, Sequelize) {\n    return queryInterface\n      .removeColumn('Departments', 'is_accrued_allowance');\n  }", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "down", "startLine": 24, "endLine": 27, "startIndex": 504, "endIndex": 632, "reach": "member", "reachNames": ["down"], "reachDetail": "require().down", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20190118-chnage-type-value-for-api-token.js", "function_name": "up", "function_code": "function (queryInterface, Sequelize) {\n\n    return queryInterface.describeTable('Companies').then(attributes => {\n\n      if (attributes.integration_api_token.type === 'UUID') {\n        return 1;\n      }\n      \n      return queryInterface\n        // Create Temp Compaies based on current model definitiom\n        .createTable('Companies_backup', models.Company.attributes)\n        .then(() => queryInterface.sequelize.query('PRAGMA foreign_keys=off;'))\n        .then(() => queryInterface.sequelize.query(\n          'INSERT INTO `Companies_backup` (`id`,`name`,`country`,`start_of_new_year`,`createdAt`,`updatedAt`,share_all_absences,ldap_auth_enabled,ldap_auth_config,`date_format`,`company_wide_message`,`mode`,`timezone`,`integration_api_token`,`integration_api_enabled`,`carry_over`) SELECT `id`,`name`,`country`,`start_of_new_year`,`createdAt`,`updatedAt`,share_all_absences,ldap_auth_enabled,ldap_auth_config,`date_format`,`company_wide_message`,`mode`,`timezone`,`integration_api_token`,`integration_api_enabled`,`carry_over` FROM `'+models.Company.tableName+'`'))\n        .then(() => queryInterface.dropTable( models.Company.tableName ))\n        .then(() => queryInterface.renameTable('Companies_backup', models.Company.tableName))\n        .then(() => queryInterface.sequelize.query('PRAGMA foreign_keys=on;'))\n        .then(() => queryInterface.addIndex(models.Company.tableName, ['id']));\n    });\n  }", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "up", "startLine": 7, "endLine": 26, "startIndex": 85, "endIndex": 1493, "reach": "member", "reachNames": ["up"], "reachDetail": "require().up", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20190118-chnage-type-value-for-api-token.js", "function_name": "down", "function_code": "function (queryInterface, Sequelize) {\n    // No way back!\n    return Promise.resolve();\n  }", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "down", "startLine": 28, "endLine": 31, "startIndex": 1504, "endIndex": 1596, "reach": "member", "reachNames": ["down"], "reachDetail": "require().down", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/route/login.js", "function_name": "get_url_to_site_root_for_anonymous_session", "function_code": "function(req) {\n  return req.get('host').indexOf('app.timeoff') < 0\n    ? '/'\n    : config.get('promotion_website_domain');\n}", "function_parameters": [{"type": "simple", "name": "req", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "get_url_to_site_root_for_anonymous_session", "startLine": 25, "endLine": 29, "startIndex": 610, "endIndex": 735, "reach": "globalNoExport", "reachName": "get_url_to_site_root_for_anonymous_session", "reachDetail": "rewire().__get__(get_url_to_site_root_for_anonymous_session)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/route/login.js", "function_name": "__direct_export__", "function_code": "function(passport) {\n\n  var express = require('express');\n  var router  = express.Router();\n\n  router.get('/login', function(req, res){\n      res.render('login', {\n          allow_create_new_accounts: JSON.parse(config.get('allow_create_new_accounts')),\n          title : 'Time Off Management',\n          url_to_the_site_root : get_url_to_site_root_for_anonymous_session(req),\n      });\n  });\n\n  router.post('/login', function(req, res, next) {\n    passport.authenticate('local', function(err, user) {\n      if (err) { return next(err); }\n\n      if (!user) {\n        req.session.flash_error('Incorrect credentials');\n        return res.redirect_with_session('/login');\n      }\n\n      req.logIn(user, function(err) {\n        if (err) { return next(err); }\n\n        req.session.flash_message('Welcome back '+user.name+'!');\n\n        return res.redirect_with_session('/');\n      });\n    })(req, res, next);\n  });\n\n  router.get('/logout', function(req, res){\n\n      // Maybe this check is redundant but to be on safe side lets do it\n      if ( !req.user ) {\n          return res.redirect_with_session(303, '/');\n      }\n\n      req.logout();\n\n      return res.redirect_with_session(res.locals.url_to_the_site_root);\n  });\n\n  router.get('/register', function(req, res){\n\n      // Disable new accounts.\n      if ( !JSON.parse(config.get('allow_create_new_accounts')) ) {\n        return res.redirect_with_session(res.locals.url_to_the_site_root);\n      }\n\n      // There is no need to register new accounts when user alreeady login\n      if ( req.user ) {\n        return res.redirect_with_session(303, '/');\n      }\n\n      res.render('register',{\n        url_to_the_site_root : get_url_to_site_root_for_anonymous_session(req),\n        countries            : config.get('countries'),\n        timezones_available  : moment_tz.tz.names(),\n      });\n  });\n\n  router.post('/register', function(req, res){\n\n      // There is no need to register new accounts when user alreeady login\n      // (just to prevent people to mess around)\n      if ( req.user ) {\n        return res.redirect_with_session(303, '/');\n      }\n\n      // TODO at some point we need to unified form validation code\n      // and make it reusable\n\n      var email = req.body['email'];\n      if (!email){\n          req.session.flash_error('Email was not provided');\n      } else if ( ! validator.isEmail(email)) {\n          req.session.flash_error('Email address is invalid');\n      }\n\n      var name = req.body['name'];\n      if (!name){\n          req.session.flash_error('Name was not specified');\n      }\n\n      var lastname = req.body['lastname'];\n      if (!lastname) {\n          req.session.flash_error('Last was not specified');\n      }\n\n      var company_name = req.body['company_name'];\n\n      var password = req.body['password'];\n      if (!password) {\n          req.session.flash_error('Password could not be blank');\n      } else if ( password !== req.body['password_confirmed'] ) {\n          req.session.flash_error('Confirmed password does not match initial one');\n      }\n\n      var country_code = req.body['country'];\n      if (! validator.matches(country_code, /^[a-z]{2}/i) ){\n          req.session.flash_error('Incorrect country code');\n      }\n\n      let timezone = validator.trim(req.body['timezone']);\n      if ( ! moment_tz.tz.names().find(tz_str => tz_str === timezone) ) {\n        req.session.flash_error('Time zone is unknown');\n      }\n\n      // In case of validation error redirect back to registration form\n      if ( req.session.flash_has_errors() ) {\n          return res.redirect_with_session('/register/');\n      }\n\n      // Try to create new record of user\n      req.app.get('db_model').User.register_new_admin_user({\n          email        : email.toLowerCase(),\n          password     : password,\n          name         : name,\n          lastname     : lastname,\n          company_name : company_name,\n          country_code : country_code,\n          timezone     : timezone,\n      })\n      // Send registration email\n      .then(function(user){\n        var email = new EmailTransport();\n\n        return email.promise_registration_email({\n          user : user,\n        })\n        .then(function(){\n          return Promise.resolve(user)\n        });\n      })\n      .then(function(user){\n\n        // Login newly created user\n        req.logIn(user, function(err) {\n          if (err) { return next(err); }\n\n          req.session.flash_message(\n              'Registration is complete.'\n          );\n\n          return res.redirect_with_session('/');\n        });\n\n      })\n      .catch(function(error){\n          console.error(\n              'An error occurred when trying to register new user '\n                  + email + ' : ' + error\n          );\n\n          req.session.flash_error(\n            'Failed to register user please contact customer service.'+\n              (error.show_to_user ? ' '+ error : '')\n          );\n\n          return res.redirect_with_session('/register/');\n      });\n\n  });\n\n  router.get('/forgot-password/', function(req, res){\n\n    res.render('forgot_password',{\n      url_to_the_site_root : get_url_to_site_root_for_anonymous_session(req),\n    });\n  });\n\n  router.post('/forgot-password/', function(req, res){\n    var email = req.body['email'];\n\n    if (!email){\n      req.session.flash_error('Email was not provided');\n\n    } else if ( ! validator.isEmail(email)) {\n      req.session.flash_error('Email address is invalid');\n    }\n\n    // In case of validation error redirect back to forgot password form\n    if ( req.session.flash_has_errors() ) {\n      return res.redirect_with_session('./');\n    }\n\n    var success_msg ='Please check your email box for further instructions';\n\n    // Normalize email address: system operates only in low cased emails\n    email = email.toLowerCase();\n\n    req.app.get('db_model').User.find_by_email(email)\n      .then(function(user){\n\n        if (!user) {\n          req.session.flash_message(success_msg);\n\n          var error = new Error('');\n          error.do_not_report = true;\n          throw error;\n        }\n\n        return Promise.resolve(user);\n      })\n      .then(function(user){\n        var Email = new EmailTransport();\n\n        return Email.promise_forgot_password_email({\n          user : user,\n        });\n      })\n      .then(function(){\n          req.session.flash_message(success_msg);\n          return res.redirect_with_session('./');\n      })\n      .catch(function(error){\n\n        if (error.do_not_report ){\n          return res.redirect_with_session('./');\n        }\n\n        console.error('An error occurred while submittin forgot password form: '+error);\n        req.session.flash_error('Failed to proceed with submitted data.');\n        return res.redirect_with_session('./');\n      });\n\n  });\n\n  router.get('/reset-password/', function(req, res){\n\n    var token = req.query['t'];\n\n    req.app.get('db_model').User.get_user_by_reset_password_token(token)\n      .then(function(user){\n        if (! user) {\n          req.session.flash_error('Unknown reset password link, please submit request again');\n          return res.redirect_with_session('/forgot-password/')\n        }\n\n        res.render('reset_password',{\n          url_to_the_site_root : get_url_to_site_root_for_anonymous_session(req),\n          token : token,\n        });\n      });\n  });\n\n  router.post('/reset-password/', function(req, res){\n\n    var token        = req.body['t'],\n    password         = req.body['password'],\n    confirm_password = req.body['confirm_password'];\n\n\n    if (password !== confirm_password) {\n      req.session.flash_error('Confirmed password does not match password');\n      return res.redirect_with_session('/reset-password/?t='+token);\n    }\n\n    req.app.get('db_model').User.get_user_by_reset_password_token(token)\n      .then(function(user){\n        if (! user) {\n          req.session.flash_error('Unknown reset password link, please submit request again');\n          return res.redirect_with_session('/forgot-password/');\n        }\n\n        return Promise.resolve(user);\n      })\n      .then(function(user){\n        user.password = req.app.get('db_model').User.hashify_password(password);\n        return user.save();\n      })\n      .then(function(user){\n        var Email = new EmailTransport();\n\n        return Email.promise_reset_password_email({\n          user : user,\n        });\n      })\n      .then(function(){\n        req.session.flash_message('Please use new password to login into system');\n          return res.redirect_with_session('/login/')\n      });\n  });\n\n  return router;\n}", "function_parameters": [{"type": "simple", "name": "passport", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "__direct_export__", "startLine": 31, "endLine": 318, "startIndex": 754, "endIndex": 9318, "reach": "direct", "reachDetail": "require()", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/db/bank_holiday.js", "function_name": "__direct_export__", "function_code": "function(sequelize, DataTypes) {\n    var BankHoliday = sequelize.define(\"BankHoliday\", {\n        // TODO add validators!\n        name : {\n            type      : DataTypes.STRING,\n            allowNull : false\n        },\n        date : {\n            type         : DataTypes.DATE,\n            allowNull    : false,\n        },\n    }, {\n        indexes : [\n          {\n            fields : ['companyId'],\n          }\n        ],\n        classMethods: {\n            associate : function( models ) {\n                BankHoliday.belongsTo(models.Company, {as : 'company'});\n            },\n\n            generate_bank_holidays : function(args){\n                var company = args.company,\n                    country_code = args.country_code;\n\n                var bank_holidays = [\n                    {\n                        name : 'Early May bank holiday',\n                        date : '2015-05-04',\n                        companyId : company.id,\n                    },\n                ];\n\n                var config_countries = config.get('countries');\n\n                if (\n                    config_countries.hasOwnProperty( country_code )\n                    && config_countries[ country_code ].hasOwnProperty('bank_holidays')\n                    && config_countries[ country_code ].bank_holidays.length > 0\n                ) {\n                  bank_holidays = _.map(\n                    config_countries[ country_code ].bank_holidays,\n                    function(bh){\n                      return {\n                        name      : bh.name,\n                        date      : bh.date,\n                        companyId : company.id,\n                      };\n                    }\n                  );\n                }\n\n                return BankHoliday.bulkCreate(bank_holidays);\n            },\n        },\n\n        instanceMethods : {\n          get_pretty_date : function(){\n            return moment.utc(this.date).format('YYYY-MM-DD');\n          },\n        }\n    });\n\n    return BankHoliday;\n}", "function_parameters": [{"type": "simple", "name": "sequelize", "variadic": false}, {"type": "simple", "name": "DataTypes", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "__direct_export__", "startLine": 7, "endLine": 72, "startIndex": 139, "endIndex": 2147, "reach": "direct", "reachDetail": "require()", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/db/department_supervisor.js", "function_name": "__direct_export__", "function_code": "function(sequelize, DataTypes){\n  var DepartmentSupervisor = sequelize.define(\"DepartmentSupervisor\", {}, {\n    underscored     : true,\n    freezeTableName : true,\n    timestamps      : true,\n    createdAt       : 'created_at',\n    updatedAt       : false,\n    indexes : [{\n      fields : [ 'department_id' ],\n    },{\n      fields : [ 'user_id' ],\n    }],\n\n    classMethods : {\n      associate : function(models) {\n\n        DepartmentSupervisor.belongsTo(models.Department, {\n          as         : 'department',\n          foreignKey : 'department_id',\n        });\n\n        DepartmentSupervisor.belongsTo(models.User, {\n          as         : 'user',\n          foreignKey : 'user_id',\n        });\n      },\n    },\n\n  });\n\n  return DepartmentSupervisor;\n}", "function_parameters": [{"type": "simple", "name": "sequelize", "variadic": false}, {"type": "simple", "name": "DataTypes", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "__direct_export__", "startLine": 4, "endLine": 35, "startIndex": 33, "endIndex": 786, "reach": "direct", "reachDetail": "require()", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/db/user_feed.js", "function_name": "__direct_export__", "function_code": "function(sequelize, DataTypes) {\n  var UserFeed = sequelize.define(\"UserFeed\", {\n    name : {\n      type : DataTypes.STRING,\n      allowNull : false,\n    },\n    feed_token : {\n      type      : DataTypes.STRING,\n      allowNull : false,\n    },\n    type : {\n      // NOTE: 'wallchart' and 'teamview' are essentially the same thing\n      // later one used to be know as former, from now on use 'teamview'\n      // and keep old what for data compatibility\n      type      : DataTypes.ENUM('calendar', 'wallchart', 'teamview', 'company'),\n      allowNull : false,\n    },\n  }, {\n\n    classMethods: {\n      associate : function( models ) {\n        UserFeed.belongsTo(models.User, {as : 'user'});\n      },\n\n      promise_new_feed : function(args){\n        var self = this,\n            user = args.user,\n            type = args.type;\n\n        return self\n          .find({ where : {userId : user.id, type : type} })\n          .then(function(feed){\n            if ( feed ) {\n              feed.feed_token = uuid.v4();\n              return feed.save();\n            } else {\n              return self.create({\n                name       : \"Calendar Feed\",\n                feed_token : uuid.v4(),\n                type       : type,\n                userId     : user.id,\n              });\n            }\n          })\n      },\n\n    },\n\n    instanceMethods : {\n      is_calendar : function() {\n        return this.type === 'calendar';\n      },\n\n      is_team_view : function(){\n        return this.type === 'wallchart' || this.type === 'teamview';\n      },\n    },\n  });\n\n  return UserFeed;\n}", "function_parameters": [{"type": "simple", "name": "sequelize", "variadic": false}, {"type": "simple", "name": "DataTypes", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "__direct_export__", "startLine": 6, "endLine": 66, "startIndex": 75, "endIndex": 1650, "reach": "direct", "reachDetail": "require()", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/route/departments.js", "function_name": "get_and_validate_department", "function_code": "function get_and_validate_department(args) {\n  var req             = args.req,\n      index           = args.suffix,\n      company         = args.company,\n      // If no_suffix is set then parameter names are considered without \"indexes\"\n      no_suffix        = args.no_suffix,\n      department_name = args.department_name;\n\n  // Get user parameters\n  let\n    name      = validator.trim(req.body[no_suffix ? 'name'      : 'name__'+index]),\n    allowance = validator.trim(req.body[no_suffix ? 'allowance' : 'allowance__'+index]),\n    boss_id   = validator.trim(req.body[no_suffix ? 'boss_id'   : 'boss_id__'+index]),\n    include_public_holidays = validator.toBoolean(\n      req.body[no_suffix ? 'include_public_holidays' : 'include_public_holidays__'+index]\n    ),\n    is_accrued_allowance = validator.toBoolean(\n      req.body[no_suffix ? 'is_accrued_allowance' : 'is_accrued_allowance__'+index]\n    );\n\n  // Validate provided parameters\n  //\n  // New allowance should be from range of (0;50]\n  if (!validator.isFloat(allowance)) {\n    req.session.flash_error(\n      'New allowance for '+department_name+' should be numeric'\n    );\n  } else if (!((0 <= allowance) && (allowance <= 50))) {\n    req.session.flash_error(\n      'New allowance for '+department_name+' should be between 0.5 and 50 days'\n    );\n  }\n  // New manager ID should be numeric and from within\n  // current company\n  if (!validator.isNumeric( boss_id ) ) {\n    req.session.flash_error(\n      'New boss reference for '+department_name+' should be numeric'\n    );\n  } else if ( ! _.contains(\n    _.map( company.users, function(user){ return String(user.id) }),\n      String(boss_id)\n  )) {\n    req.session.flash_error(\n      'New boss for '+department_name+' is unknown'\n    );\n  }\n\n  return {\n    allowance               : allowance,\n    bossId                  : boss_id,\n    include_public_holidays : include_public_holidays,\n    is_accrued_allowance    : is_accrued_allowance,\n    name                    : name,\n  };\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "get_and_validate_department", "startLine": 26, "endLine": 80, "startIndex": 623, "endIndex": 2613, "reach": "globalNoExport", "reachName": "get_and_validate_department", "reachDetail": "rewire().__get__(get_and_validate_department)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/route/departments.js", "function_name": "promise_to_extract_company_and_department", "function_code": "function promise_to_extract_company_and_department(req, only_active = true) {\n  var department_id = req.params['department_id'],\n    company;\n\n  return Promise.try(function(){\n\n    if ( ! validator.isInt(department_id)) {\n      throw new Error('User '+req.user.id+' tried to open department refered by  non-int ID '+department_id);\n    }\n\n    if (only_active) {\n      return req.user.getCompany({\n        scope : ['with_active_users', 'order_by_active_users'],\n      });\n    } else {\n      return req.user.getCompany({\n        scope : ['with_all_users'],\n      });\n    }\n  })\n  .then(function(c){\n    company = c;\n\n    if ( ! company ) {\n      throw new Error('Cannot determin company!');\n    }\n\n    return company.getDepartments({\n      scope : ['with_simple_users', 'with_boss', 'with_supervisors'],\n      where : {\n        id : department_id,\n      }\n    });\n  })\n  .then(function(departments){\n    var department = departments[0];\n\n    // Ensure we have database record for given department ID\n    if ( ! department ) {\n      throw new Error('Non existing department ID provided');\n    }\n\n    return Promise.resolve({\n      company    : company,\n      department : department,\n    });\n  });\n}", "function_parameters": [{"type": "simple", "name": "req", "variadic": false}, {"type": "simple", "name": "only_active", "default": {"js_type": "boolean", "js_value": "true"}, "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "promise_to_extract_company_and_department", "startLine": 225, "endLine": 272, "startIndex": 6440, "endIndex": 7636, "reach": "globalNoExport", "reachName": "promise_to_extract_company_and_department", "reachDetail": "rewire().__get__(promise_to_extract_company_and_department)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/route/departments.js", "function_name": "promise_to_remove_supervisor", "function_code": "function promise_to_remove_supervisor(args) {\n  var\n    supervisor_id = args.supervisor_id,\n    company       = args.company,\n    department    = args.department;\n\n  // Make sure that provided supervisor ID belongs to user from current company\n  if (company.users.map(function(u){return String(u.id)}).indexOf( String(supervisor_id) ) === -1){\n    return Promise.resolve(1);\n  }\n\n  return  department.Model.sequelize.models.DepartmentSupervisor.destroy({\n    where : {\n      department_id : department.id,\n      user_id       : supervisor_id,\n    },\n  });\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "promise_to_remove_supervisor", "startLine": 376, "endLine": 393, "startIndex": 10461, "endIndex": 11018, "reach": "globalNoExport", "reachName": "promise_to_remove_supervisor", "reachDetail": "rewire().__get__(promise_to_remove_supervisor)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/route/departments.js", "function_name": "promise_to_update_supervisors", "function_code": "function promise_to_update_supervisors(args) {\n\n  var\n    req        = args.req,\n    company    = args.company,\n    department = args.department;\n\n  var supervisor_ids = req.body.supervisor_id || [];\n\n  // Take list of all users as a base of intersaction,\n  // so we use submitted data only as criteria and do not save it in database\n  supervisor_ids = company.users\n    .map(function(user){ return user.id})\n    .filter(function(id){ return supervisor_ids.indexOf(String(id)) !== -1});\n\n  var link_model = department.Model.sequelize.models.DepartmentSupervisor;\n\n  return link_model.destroy({\n    where : {\n      department_id : department.id,\n    }\n  })\n  .then(function(){\n    return link_model.bulkCreate(\n      supervisor_ids.map(function(id){ return { user_id : id, department_id : department.id  } })\n    );\n  });\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "promise_to_update_supervisors", "startLine": 395, "endLine": 422, "startIndex": 11020, "endIndex": 11842, "reach": "globalNoExport", "reachName": "promise_to_update_supervisors", "reachDetail": "rewire().__get__(promise_to_update_supervisors)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/route/departments.js", "function_name": "promise_to_update_department", "function_code": "function promise_to_update_department(args) {\n  var\n    req        = args.req,\n    company    = args.company,\n    department = args.department;\n\n  var attributes = get_and_validate_department({\n    company         : company,\n    department_name : department.name,\n    no_suffix       : true,\n    req             : req,\n  });\n\n  // If there were any validation errors: do not update department\n  if ( req.session.flash_has_errors() ) {\n    throw new Error(\"Invalid parameters submitted while while attempt to update department details\");\n  }\n\n  return department.updateAttributes(attributes);\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "promise_to_update_department", "startLine": 424, "endLine": 443, "startIndex": 11844, "endIndex": 12437, "reach": "globalNoExport", "reachName": "promise_to_update_department", "reachDetail": "rewire().__get__(promise_to_update_department)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/t/lib/register_new_user.js", "function_name": "__direct_export__", "function_code": "function(args){\n  if (args.hasOwnProperty('driver')) {\n    return args.driver.call(function(){return register_new_user_func(args)});\n  } else {\n    return register_new_user_func(args);\n  }\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "__direct_export__", "startLine": 166, "endLine": 172, "startIndex": 4360, "endIndex": 4550, "reach": "direct", "reachDetail": "require()", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/calendar_month.js", "function_name": "CalendarMonth", "function_code": "function CalendarMonth(day, args){\n    var self = this;\n    this.date           = moment.utc(day).startOf('month');\n    this._leaves        = {};\n    this._bank_holidays = {};\n\n\n    if (args && args.today) {\n      self.today = args.today;\n    } else {\n      throw new Error('CalendarMonth requires today - moment object that represents today');\n    }\n\n    if (args){\n      self._schedule = args.schedule;\n    }\n\n    if ( ! self._schedule ) {\n      throw new Error('CalendarMonth requires schedule');\n    }\n\n    if (args && args.bank_holidays){\n        var map = {};\n        args.bank_holidays.forEach(function(day){\n            day = {\n              date : moment.utc(day.date),\n              name : day.name,\n            };\n            map[day.date.clone().format(self.default_date_format())] = day;\n        });\n        self._bank_holidays = map;\n    }\n\n    if (args && args.leave_days){\n        var map = {};\n        args.leave_days.forEach(function(day){\n            var attribute = moment.utc(day.date).format(self.default_date_format());\n            if ( ! map[attribute] ) {\n                map[attribute] = day;\n            } else if ( map[attribute] ) {\n\n                if (map[attribute].is_all_day_leave()) {\n                    return;\n                }\n\n                if (day.is_all_day_leave()){\n                    map[attribute] = day;\n                } else if ( map[attribute].day_part !== day.day_part ) {\n\n                  // Merge leave types from both days into one in \"map\"\n                  if (day.is_morning_leave()) {\n                    map[attribute].morning_leave_type_id = day.morning_leave_type_id;\n                  }\n\n                  if ( day.is_afternoon_leave() ) {\n                    map[attribute].afternoon_leave_type_id = day.afternoon_leave_type_id;\n                  }\n\n                  map[attribute].pretend_to_be_full_day();\n                }\n            }\n        });\n        self._leaves = map;\n    }\n\n    self._leave_types_map = {};\n\n    if (args && args.leave_types) {\n      // Build leave types look up dictionary\n      args.leave_types.forEach(lt => self._leave_types_map[ lt.id ] = lt);\n    }\n\n  return;\n}", "function_parameters": [{"type": "simple", "name": "day", "variadic": false}, {"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "CalendarMonth", "startLine": 7, "endLine": 80, "startIndex": 85, "endIndex": 2249, "reach": "direct", "reachDetail": "require()", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/db/user.js", "function_name": "__direct_export__", "function_code": "function(sequelize, DataTypes) {\n\n  var instance_methods = get_instance_methods(sequelize);\n\n  withCompanyAwareness.call ( instance_methods, sequelize ) ;\n  withAbsenceAwareness.call ( instance_methods, sequelize ) ;\n\n  var class_methods = get_class_methods(sequelize);\n\n  withAssociations.call ( class_methods, sequelize ) ;\n  withScopes.call       ( class_methods, sequelize ) ;\n\n  var User = sequelize.define(\"User\", {\n      // TODO add validators!\n      email : {\n          type      : DataTypes.STRING,\n          allowNull : false\n      },\n      password : {\n          type      : DataTypes.STRING,\n          allowNull : false\n      },\n      name : {\n          type      : DataTypes.STRING,\n          allowNull : false\n      },\n      lastname : {\n          type      : DataTypes.STRING,\n          allowNull : false\n      },\n      activated : {\n          type         : DataTypes.BOOLEAN,\n          allowNull    : false,\n          defaultValue : false,\n          comment      : 'This flag means that user account was activated, e.g. login',\n      },\n      admin : {\n          type         : DataTypes.BOOLEAN,\n          allowNull    : false,\n          defaultValue : false,\n          comment      : 'Indicate if account can edit company wide settings',\n      },\n      auto_approve : {\n        type         : DataTypes.BOOLEAN,\n        allowNull    : false,\n        defaultValue : false,\n        comment      : 'Indicate if leave request from current employee are auto approved',\n      },\n      start_date : {\n          type         : DataTypes.DATE,\n          allowNull    : false,\n          defaultValue : DataTypes.NOW,\n          comment      : 'Date employee start to work for company',\n          get: function(){\n            return moment.utc(this.getDataValue('start_date')).format('YYYY-MM-DD');\n          },\n      },\n      end_date : {\n          type         : DataTypes.DATE,\n          allowNull    : true,\n          defaultValue : null,\n          comment      : 'Date emplyee stop working for company',\n          get: function(){\n            const endDate = this.getDataValue('end_date');\n            if ( ! endDate ) {\n              return endDate;\n            }\n\n            return moment.utc(endDate).format('YYYY-MM-DD');\n          },\n      },\n  }, {\n      indexes : [\n        {\n          fields : ['companyId'],\n        },\n        {\n          fields : ['lastname'],\n        },\n      ],\n      classMethods: class_methods,\n\n      instanceMethods : instance_methods,\n    });\n\n    return User;\n}", "function_parameters": [{"type": "simple", "name": "sequelize", "variadic": false}, {"type": "simple", "name": "DataTypes", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "__direct_export__", "startLine": 18, "endLine": 104, "startIndex": 494, "endIndex": 3003, "reach": "direct", "reachDetail": "require()", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/db/user.js", "function_name": "get_instance_methods", "function_code": "function get_instance_methods(sequelize) {\n\n  return {\n\n    is_my_password : function( password ) {\n        return sequelize.models.User.hashify_password( password ) === this.password;\n    },\n\n    /*\n     * Activate user only when it is inactive.\n     * Return promise that gets user's object.\n     * */\n    maybe_activate : function(){\n      if ( ! this.activated ) {\n          this.activated = true;\n      }\n      return this.save();\n    },\n\n    is_admin : function() {\n      return this.admin === true;\n    },\n\n    /*\n     * Indicates is leave requests from current user are automatically approved\n     * */\n    is_auto_approve : function(){\n      return this.auto_approve === true;\n    },\n\n    full_name : function() {\n      return this.name + ' ' + this.lastname;\n    },\n\n    /*\n     * Indicates if the user is active\n     * */\n    is_active : function(){\n      return this.end_date === null || moment(this.end_date).isAfter(moment());\n    },\n\n    // TODO VPP: rename this method as its name misleading: it returns all users\n    // managed by current users + user itself, so it should be something like\n    // \"promise_all_supervised_users_plus_me\"\n    // In fact this method probably have to be ditched in favour of more granular ones\n    //\n    promise_users_I_can_manage : function(){\n      var this_user = this;\n\n      // Check if current user is admin, then fetch all users form company\n      if ( this_user.is_admin() ) {\n\n        return this_user\n          .getCompany({\n            scope : ['with_all_users'],\n          })\n          .then(function(company){\n            return Promise.resolve( company.users );\n          });\n      }\n\n      // If current user has any departments under supervision then get\n      // all users from those departments plus user himself,\n      // if no supervised users an array with only current user is returned\n      return this_user.promise_supervised_departments()\n      .then(function(departments){\n        var users = _.flatten(\n          _.map(\n            departments,\n            function(department){ return department.users; }\n          )\n        );\n\n        // Make sure current user is considered as well\n        users.push(this_user);\n\n        // Remove duplicates\n        users = _.uniq(\n          users,\n          function(user){ return user.id; }\n        );\n\n        // Order by last name\n        users = _.sortBy(\n          users,\n          function(user){ return user.lastname; }\n        );\n\n        return users;\n      });\n\n    }, // promise_users_I_can_manage\n\n    /*\n     * Return user's boss, the head of department user belongs to\n     *\n     * */\n    promise_boss : function(){\n      return this.getDepartment({\n        scope : ['with_boss'],\n      })\n      .then(department => Promise.resolve( department.boss ));\n    },\n\n    /*\n     *  Return users who could supervise current user, that is those who could\n     *  approve its leave requests and who can create leave requests on behalf of\n     *  those user.\n     *\n     * */\n    promise_supervisors : function(){\n      return this.getDepartment({\n        scope : ['with_boss', 'with_supervisors'],\n      })\n      .then( department => Promise.resolve( _.flatten([ department.boss, department.supervisors ]) ) );\n    },\n\n    promise_supervised_departments : function() {\n      let self = this;\n\n      return sequelize.models.DepartmentSupervisor.findAll({ where : { user_id : self.id } })\n        // Obtain departments current user supervises as secondary supervisor\n        .then(department_supervisors => department_supervisors.map( obj => obj.department_id ))\n        .then( department_ids => {\n\n          if ( ! department_ids ) {\n            department_ids = [];\n          }\n\n          return sequelize.models.Department.scope('with_simple_users').findAll({\n            where : {\n              $or : [\n                { id : department_ids },\n                { bossId : self.id },\n              ]\n            }\n          });\n        });\n    },\n\n    promise_supervised_users : function () {\n      let self = this;\n\n      return self\n        .promise_supervised_departments()\n        .then(departments => {\n          return self.Model.findAll({ where : { DepartmentId : departments.map(d => d.id ) } });\n        })\n    },\n\n\n    // Generate object that represent Employee allowance\n    promise_allowance : function(args) {\n      args = args || {};\n      // Override user to be current one\n      args.user = this;\n      return UserAllowance.promise_allowance(args);\n    },\n\n    reload_with_leave_details : function(args){\n      var self = this;\n\n      return Promise.join(\n        self.promise_my_active_leaves(args),\n        self.getDepartment(),\n        self.promise_schedule_I_obey(),\n        function(leaves, department, schedule){\n          self.my_leaves = leaves;\n          self.department = department;\n\n          // Note: we do not do anything with scheduler as \"promise_schedule_I_obey\"\n          // sets the \"cached_schedule\" attribute under the hood, which is used in\n          // synchronous code afterwards. Yes... it is silly, but it is where we are\n          // at thi moment after mixing non blocking and blocking code together...\n          //\n          return Promise.resolve(self);\n        }\n      );\n\n    },\n\n    // This method reload user object to have all necessary information to render\n    // each page\n    reload_with_session_details : function(){\n      var self = this;\n      return Promise.join(\n        self.promise_users_I_can_manage(),\n        self.get_company_with_all_leave_types(),\n        self.promise_schedule_I_obey(),\n        function(users, company, schedule){\n          self.supervised_users = users || [];\n          self.company = company;\n\n          // Note: we do not do anithing with scheduler as \"promise_schedule_I_obey\"\n          // sets the \"cached_schedule\" attribute under the hood, which is used in\n          // synchronous code afterwards. Yes... it is silly, but it is where we are\n          // at thi moment after mixing non blocking and blocking code together...\n\n          return Promise.resolve(self);\n        });\n    },\n\n\n    remove : function() {\n      var self = this;\n\n      // make sure I am not admin, otherwise throw an error\n      if (self.is_admin()) {\n        throw new Error('Cannot remove administrator user');\n      }\n\n      // make sure I am not supervisor, otherwise throw an error\n      return self.promise_supervised_departments()\n        .then(departments => {\n          if (departments.length > 0){\n            throw new Error(\"Cannot remove supervisor\");\n          }\n\n          return self.getMy_leaves();\n        })\n        .then(function(leaves){\n          // remove all leaves\n          return Promise.all(\n            _.map( leaves, function(leave){ return leave.destroy(); })\n          );\n        })\n\n        // remove user record\n        .then(function(){\n          return self.destroy();\n        })\n\n    },\n\n    get_reset_password_token : function(){\n      var self = this;\n\n      return new Buffer( self.email + ' ' + self.Model.hashify_password( self.password ) ).toString('base64');\n    },\n\n    // Accept an object that represent email to be sent to current user and\n    // record it into the corresponding audit table\n    //\n    record_email_addressed_to_me : function(email_obj) {\n\n      // validate email object to contain all necessary fields\n      if ( ! email_obj ||\n        ! email_obj.hasOwnProperty('subject') ||\n        ! email_obj.subject ||\n        ! email_obj.hasOwnProperty('body') ||\n        ! email_obj.body\n      ) {\n        throw new Error(\n          'Got incorrect parameters. There should be an object '+\n          'to represent and email and contain subject and body'\n        );\n      }\n\n      const promise_action = this.sequelize.models.EmailAudit.create({\n        email      : this.email,\n        subject    : htmlToText.fromString(email_obj.subject),\n        body       : htmlToText.fromString(email_obj.body),\n        user_id    : this.id,\n        company_id : this.companyId,\n      });\n\n      return promise_action;\n    },\n\n    promise_schedule_I_obey : function(){\n      var self = this;\n\n      if ( self.cached_schedule ) {\n        return Promise.resolve( self.cached_schedule );\n      }\n\n      return self.sequelize.models.Schedule\n        .findAll({\n          where : {\n            $or : [\n              { user_id : self.id },\n              { company_id : self.companyId },\n            ]\n          }\n        })\n        .then(function(schedules){\n\n          // no schedules for current user in DB, return default one\n          if (schedules.length === 0) {\n            return self.sequelize.models.Schedule\n              .promise_to_build_default_for({ company_id : self.companyId })\n              .then(function(sch){ self.cached_schedule = sch; return Promise.resolve(sch) });\n          }\n\n          // there are two schedules, presumably one company wide and another\n          // is user specific, return later one\n          if (schedules.length === 2) {\n            return Promise.resolve(\n              _.find(schedules, function(sch){ return sch.is_user_specific() })\n            )\n            .then(function(sch){ self.cached_schedule = sch; return Promise.resolve(sch) });\n          }\n\n          // single schedule means it is company wide one\n          return Promise.resolve( schedules.pop() )\n            .then(function(sch){ self.cached_schedule = sch; return Promise.resolve(sch) });\n        });\n    },\n\n  };\n\n}", "function_parameters": [{"type": "simple", "name": "sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "get_instance_methods", "startLine": 111, "endLine": 422, "startIndex": 3108, "endIndex": 12569, "reach": "globalNoExport", "reachName": "get_instance_methods", "reachDetail": "rewire().__get__(get_instance_methods)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/db/user.js", "function_name": "get_class_methods", "function_code": "function get_class_methods(sequelize) {\n  return {\n\n    /* hashify_password( password_string ) : string\n     *\n     * For provided string return hashed string.\n     *\n     * */\n    hashify_password : function( password ) {\n      return crypto\n        .createHash('md5')\n        .update(\n          password + config.get('crypto_secret'),\n          (config.get('crypto_hash_encoding') || 'binary')\n        )\n        .digest('hex');\n    },\n\n\n    get_user_by_reset_password_token : function(token) {\n      var self                  = this,\n      unpacked_token            = new Buffer(token, 'base64').toString('ascii'),\n      email_and_hashed_password = unpacked_token.split(/\\s/);\n\n      return self.find_by_email(email_and_hashed_password[0])\n        .then(function(user){\n          if (user && self.hashify_password(user.password) === email_and_hashed_password[1]) {\n            return Promise.resolve(user);\n          } else {\n            return Promise.resolve();\n          }\n        })\n    },\n\n    // Get active user by provided email address\n    find_by_email : function( email ) {\n\n      // TODO validate email\n\n      var condition = { email : email };\n      var active_users_filter = this.get_active_user_filter();\n      for (var attrname in active_users_filter) {\n        condition[attrname] = active_users_filter[attrname];\n      }\n\n      return this.find({ where : condition });\n    },\n\n    find_by_id : function(id) {\n      return this.find({ where : {id : id}});\n    },\n\n    /*\n     * Create new admin user within new environment - company etc\n     * */\n    register_new_admin_user : function(attributes){\n\n      // TODO add parameters validation\n\n      // Make sure we hash the password before storing it to DB\n      attributes.password = this.hashify_password(attributes.password);\n\n      var new_departments,\n          new_user,\n          country_code = attributes.country_code,\n          timezone     = attributes.timezone,\n          company_name = attributes.company_name;\n\n      delete attributes.company_name;\n      delete attributes.country_code;\n\n      return sequelize.models.User.find_by_email( attributes.email )\n        .then(function(existing_user){\n          if (existing_user) {\n            const error = new Error('Email is already used')\n            error.show_to_user = true;\n            throw error;\n          }\n\n          if (attributes.name.toLowerCase().indexOf('http') >= 0) {\n            const error = new Error('Name cannot have links');\n            error.show_to_user = true;\n            throw error;\n          }\n\n          return sequelize.models.Company\n            .create_default_company({\n              name         : company_name,\n              country_code : country_code,\n              timezone     : timezone,\n            });\n        })\n\n        // Make sure new user is going to be linked with a company\n        .then(function(company){\n\n          attributes.companyId = company.id;\n          attributes.admin     = true;\n\n          return company.getDepartments();\n        })\n\n        // Make sure new user is linked with department\n        .then(function(departments){\n\n          new_departments = departments;\n\n          attributes.DepartmentId = departments[0].id;\n\n          return sequelize.models.User.create( attributes );\n        })\n\n        // Make sure new departments know who is their boss\n        .then(function(user){\n          new_user = user;\n\n          return Promise.all(_.map(new_departments, function(department){\n            department.bossId = user.id;\n            return department.save();\n          }));\n        })\n\n        // Return promise with newly created user\n        .then(function(){\n          return Promise.resolve(new_user);\n        });\n    },\n\n    get_active_user_filter : function(){\n      return {\n        $or : [\n          { end_date : {$eq : null}},\n          { end_date : {$gte : moment.utc().startOf('day').format('YYYY-MM-DD') }},\n        ],\n      };\n    },\n\n  };\n}", "function_parameters": [{"type": "simple", "name": "sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "get_class_methods", "startLine": 424, "endLine": 562, "startIndex": 12572, "endIndex": 16529, "reach": "globalNoExport", "reachName": "get_class_methods", "reachDetail": "rewire().__get__(get_class_methods)", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20180103-sort-order-for-leave-types.js", "function_name": "up", "function_code": "function (queryInterface, Sequelize) {\n\n    queryInterface.describeTable('LeaveTypes').then(function(attributes){\n\n      if (attributes.hasOwnProperty('sort_order')) {\n        return 1;\n      }\n\n      return queryInterface.addColumn(\n        'LeaveTypes',\n        'sort_order',\n        models.LeaveType.attributes.sort_order\n      );\n    });\n\n  }", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "up", "startLine": 7, "endLine": 22, "startIndex": 83, "endIndex": 429, "reach": "member", "reachNames": ["up"], "reachDetail": "require().up", "hasReturn": false, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/migrations/20180103-sort-order-for-leave-types.js", "function_name": "down", "function_code": "function (queryInterface, Sequelize) {\n    return queryInterface.removeColumn('LeaveTypes', 'sort_order');\n  }", "function_parameters": [{"type": "simple", "name": "queryInterface", "variadic": false}, {"type": "simple", "name": "Sequelize", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "down", "startLine": 24, "endLine": 26, "startIndex": 440, "endIndex": 550, "reach": "member", "reachNames": ["down"], "reachDetail": "require().down", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 2, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/passport/getCompanyAdminByToken.js", "function_name": "<anonymous function reachable with 'require()'>", "function_code": "({token, model}) => {\n\n  if ( ! token ) {\n    throwUserError({\n      system_error : \"Provided token has FALSY value\",\n      user_error : \"Wrong access token\",\n    });\n  }\n\n  let action = model.Company.getCompanyByApiToken({ token });\n\n  action = action.then(company => {\n    if ( ! company ) {\n      throwUserError({\n        system_error: `Cannot find company record for provided token ${token}`,\n        user_error: 'Wrong access token',\n      });\n    }\n\n    const [adminUser] = company.get('users').filter(u => u.is_admin());\n\n    if ( ! adminUser) {\n      throwUserError({\n        system_error: `Failed to find admin users for company ${ company.id }`,\n        user_error: 'Wrong access token',\n      });\n    }\n\n    return Promise.resolve(adminUser);\n  });\n\n  return action;\n}", "function_parameters": [{"type": "object_pattern", "keys": ["token", "model"], "variadic": false}], "test_cases": [], "details": {"type": "function", "startLine": 8, "endLine": 40, "startIndex": 117, "endIndex": 896, "reach": "direct", "reachDetail": "require()", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": false, "paramCount": 1, "reason": "UnsupportedParameterNotSimple"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/user_importer.js", "function_name": "add_user", "function_code": "function add_user(args) {\n  let validated_args = Joi.validate(args, add_user_interface_schema);\n\n  if (validated_args.error) {\n    console.log('An error occured when validatin parameters for add_user: ');\n    console.dir(validated_args);\n    Exception.throw_user_error({\n      system_error : 'Failed to add new due to validation errors',\n      user_error : 'Failed to add user',\n    });\n  }\n\n  // Use validated (and expanded) arguments object\n  args = validated_args.value;\n\n  let attributes = {};\n\n  attributes.email        = args.email.toLowerCase();\n  attributes.lastname     = args.lastname;\n  attributes.name         = args.name;\n  attributes.companyId    = args.company_id;\n  attributes.DepartmentId = args.department_id;\n\n  attributes.password     = Models.User.hashify_password(args.password);\n  attributes.admin        = args.admin;\n  attributes.auto_approve = args.auto_approve;\n  attributes.end_date     = args.end_date;\n\n  // Pass start date inky if it is set, otherwise rely on database to use\n  // default value\n  if (args.start_date) {\n    attributes.start_date = args.start_date;\n  }\n\n  return Promise.resolve()\n\n    // Ensure given department ID is owned by given company ID\n    .then(() => Models.Department\n      .findOne({\n        where : { id : args.department_id, companyId : args.company_id },\n      })\n      .then( department => {\n        if ( ! department ) {\n          Exception.throw_user_error({\n            system_error : 'Mismatch in department/company IDs when creating new user '\n              + args.department_id + '/' + args.company_id,\n            user_error : 'Used wrong department',\n          });\n        }\n        return Promise.resolve();\n      })\n    )\n\n    // Ensure provided email is free to use\n    .then(() => validate_email_to_be_free({ email : args.email }))\n\n    // Create new user record\n    .then(() => Models.User.create(attributes));\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "add_user", "startLine": 27, "endLine": 85, "startIndex": 809, "endIndex": 2697, "reach": "member", "reachNames": ["add_user"], "reachDetail": "require().add_user", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/user_importer.js", "function_name": "add_users_in_bulk", "function_code": "function add_users_in_bulk(args) {\n  let bulk_header = args.bulk_header,\n      bulk_data   = args.bulk_data,\n      company_id  = args.to_company_id;\n\n  let company,\n    email_vector_index      = 0,\n    lastname_vector_index   = 1,\n    name_vector_index       = 2,\n    department_vector_index = 3;\n\n  return Models.Company.scope('with_simple_departments').findOne({\n    where : { id : company_id },\n  })\n\n\n  // Validate department names and replace names with IDs\n  .then(cmp => {\n    company = cmp;\n    let dep_name_to_id = _.object(\n      company.departments.map(dep => [dep.name, dep.id])\n    );\n\n    let with_invalid_departments = _.filter(\n      bulk_data, vector => ! dep_name_to_id[ vector[ department_vector_index] ]\n    );\n\n    if (with_invalid_departments.length > 0) {\n      let unknown_departments =  with_invalid_departments\n        .map(vector => '\"'+vector[department_vector_index]+'\"')\n        .join(', ');\n\n      Exception.throw_user_error({\n        user_error : 'Following departments could not be found in '\n          + company.name + ' account: ' + unknown_departments,\n        system_error : 'While importing users to company '\n          + company.id + ' there were unknown departments '\n          + unknown_departments,\n      });\n    }\n\n    bulk_data.forEach(\n      vector => vector[ department_vector_index ] = dep_name_to_id[ vector[ department_vector_index ] ]\n    );\n\n    return Promise.resolve();\n  })\n\n  // Add users\n  .then(() => {\n    return Promise.map(bulk_data, vector => {\n      let email = vector[ email_vector_index ];\n\n      return Promise.resolve()\n        .then(() => add_user({\n          email         : email,\n          lastname      : vector[ lastname_vector_index ],\n          name          : vector[ name_vector_index ],\n          department_id : vector[ department_vector_index ],\n          company_id    : company_id,\n        }))\n        .catch(error => {\n          return Promise.resolve({\n            error : error,\n            email : email,\n          });\n        });\n    }, {\n      concurrency : 2,\n    })\n  })\n\n  // Sort out successfully creted users and errors\n  .then(users_or_errors => {\n    let result = {\n      users : [],\n      errors : [],\n    };\n\n    users_or_errors.forEach( item => {\n      item.hasOwnProperty('error')\n        ? result.errors.push( item )\n        : result.users.push( item )\n    });\n\n    return Promise.resolve(result);\n  });\n\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "add_users_in_bulk", "startLine": 87, "endLine": 175, "startIndex": 2699, "endIndex": 5104, "reach": "member", "reachNames": ["add_users_in_bulk"], "reachDetail": "require().add_users_in_bulk", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}, {"function_path": "/home/edmond/ponicode_data/harlequin/javascript/pitfall/kaleidoscope/timeoff-management-application/lib/model/user_importer.js", "function_name": "validate_email_to_be_free", "function_code": "function validate_email_to_be_free(args) {\n  let validate_args = Joi.validate(args, validate_email_to_be_free_schema);\n\n  if (validate_args.error) {\n    Exception.throw_user_error({\n      system_error : 'validate_email_to_be_free failed arguments validation',\n      user_error   : 'Failed to validate email',\n    });\n  }\n\n  return Models\n    .User\n    .find_by_email(args.email)\n    .then(user => {\n\n      if (user) {\n        Exception.throw_user_error(\n          'Email is already in use'\n        );\n      }\n\n      return Promise.resolve();\n  });\n}", "function_parameters": [{"type": "simple", "name": "args", "variadic": false}], "test_cases": [], "details": {"type": "function", "name": "validate_email_to_be_free", "startLine": 181, "endLine": 204, "startIndex": 5230, "endIndex": 5779, "reach": "member", "reachNames": ["validate_email_to_be_free"], "reachDetail": "require().validate_email_to_be_free", "hasReturn": true, "paramsSyntaxSupported": true, "paramsAllSimple": true, "paramCount": 1, "reason": "Valid"}}]